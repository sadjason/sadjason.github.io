(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{132:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Git 是目前最好的版本管理工具，初入职场狠狠学习了一番，做了不少笔记，其中关于 git rebase 的笔记在公司内部被点赞最多，于是搬到博客。")]),t._v(" "),s("p",[t._v("Rebase，中文世界里常被称为「变基」，即"),s("strong",[t._v("改变基础")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"改变基础-–-git-rebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#改变基础-–-git-rebase"}},[t._v("#")]),t._v(" 改变基础 – git rebase")]),t._v(" "),s("p",[t._v("什么叫基础呢？除了第一条默认分支 master 以外，其他分支都是在别的分支的某个 commit 之上发展而来的，如下图：")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-1@2x.png"}}),t._v(" "),s("p",[t._v("图中，分支 experiment 是在 master 分支的 commit C2 的基础上发展而来的，故而认为 C2 的 experiment 分支的 base。")]),t._v(" "),s("p",[t._v("通过"),s("code",[t._v("git rebase")]),t._v("命令可以改变分支的 base，动手体验一下。\n首先，按照上图创建了 git 工程，commit 和 branch 信息如下（通过 SourceTree 查看，使用"),s("code",[t._v("git log --graph --decorate")]),t._v("也可以看到类似效果）：")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-2@2x.png"}}),t._v(" "),s("p",[t._v("现在执行rebase操作：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout experiment\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master\n")])])]),s("p",[t._v("新的 commit 和 branch 信息如下：")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-3@2x.png"}}),t._v(" "),s("p",[t._v("显然，分支 experiment 的 base 变成了 C3：")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-4@2x.png"}}),t._v(" "),s("p",[t._v("可以看到：分支 experiment 中的 commits 都是新的，原来的 commits 都没了。")]),t._v(" "),s("p",[t._v("rebase 和 merge 操作非常类似，"),s("a",{attrs:{href:"https://git-scm.com/book/en/v2/Git-Branching-Rebasing",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rebasing"),s("OutboundLink")],1),t._v("里有详细说明。")]),t._v(" "),s("p",[s("code",[t._v("git rebase")]),t._v("的基本使用姿势有两种"),s("code",[t._v("git rebase <branch>")]),t._v("和"),s("code",[t._v("git rebase <SHA-1>")]),t._v("。分支名"),s("code",[t._v("<branch>")]),t._v("说到底是指向某个 commit 的指针，"),s("code",[t._v("git rebase <branch>")]),t._v("将当前分支的 base 重设为"),s("code",[t._v("<branch>")]),t._v("所指向的 commit；"),s("code",[t._v("git rebase <SHA-1>")]),t._v("更直接一些，"),s("code",[t._v("<SHA-1>")]),t._v("指的是目标 commit 的 id。")]),t._v(" "),s("p",[t._v("演示一下"),s("code",[t._v("git rebase <SHA-1>")]),t._v("的使用示例：")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-5@2x.png"}}),t._v(" "),s("p",[t._v("在上图的基础上执行"),s("code",[t._v("git rebase 32aafcb")]),t._v("（32aafcb 是 C3 的 SHA-1 标识符），得到的结果如下：")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-6@2x.png"}}),t._v(" "),s("p",[t._v("可以看到，分支 experiment 的 base 由 C2 变成了 C3。")]),t._v(" "),s("p",[t._v("延伸问题：什么情景下，使用 rebase 而不是 merge？")]),t._v(" "),s("h2",{attrs:{id:"重写历史-–-git-rebase-i"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重写历史-–-git-rebase-i"}},[t._v("#")]),t._v(" 重写历史 – git rebase -i")]),t._v(" "),s("p",[t._v("加上"),s("code",[t._v("-i")]),t._v("参数可以在 rebase 过程中对某些 commit 进行编辑，这里的参数"),s("code",[t._v("-i")]),t._v("表示的是 interactive，换句话说，这是个交互式的命令。")]),t._v(" "),s("p",[t._v("常会使用到"),s("code",[t._v("git rebase -i <SHA-1>")]),t._v("进行 commit 操作，包括删除 commit、合并 commit。")]),t._v(" "),s("h3",{attrs:{id:"删除-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除-commit"}},[t._v("#")]),t._v(" 删除 commit")]),t._v(" "),s("p",[t._v("有时候，我们想删掉某个 commit。")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-7@2x.png"}}),t._v(" "),s("p",[t._v("假如想删掉 experiment 最新的 commit E3，执行"),s("code",[t._v("git rebase -i 4063139")]),t._v("，之后会进入可交互的 vim 编辑器，如下：")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-8@2x.png"}}),t._v(" "),s("p",[t._v("可以对分支 experiment 上的每个 commit 进行精细控制：")]),t._v(" "),s("ul",[s("li",[t._v("pick 是默认操作，啥都不干；")]),t._v(" "),s("li",[t._v("squash，删除分支，把更新内容合并到前一个分支，在下一步中会让重新编辑 previous commit 的 log message")]),t._v(" "),s("li",[t._v("fixup，和 squash 差不多，只是不会让重新编辑 previous commit 的 log message")]),t._v(" "),s("li",[t._v("drop，删除 commit")])]),t._v(" "),s("p",[t._v("这里需要删除 E3，因此修改第三行的 pick 为 drop，得到的结果如下：")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-9@2x.png"}}),t._v(" "),s("p",[t._v("可以看到，分支 experiment 的最后一个 commit E3 不见了。需要说明的是，由于没有修改分支 experiment 的 base，所以 experiment 上的其他 commit 并未发生变化（相应的 SHA-1 不变）。")]),t._v(" "),s("h3",{attrs:{id:"合并-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并-commit"}},[t._v("#")]),t._v(" 合并 commit")]),t._v(" "),s("p",[t._v("现在，我想在上面的基础上合并 experiment 的 commit E1 和 commit E2，仍然执行"),s("code",[t._v("git rebase -i 4063139")]),t._v("，进入 vim 编辑器：")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-10@2x.png"}}),t._v(" "),s("p",[t._v("修改第二行的 pick 为 squash，保存后，Git 会让重新编辑 E1 的 log message 信息：")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-11@2x.png"}}),t._v(" "),s("p",[t._v("这里直接把原来 E2 的 log message 给注释起来，只保留 E1 的 log message，保存，得到的结果如下：")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-12@2x.png"}}),t._v(" "),s("p",[t._v("原来 E1 内容发生了变化，因此产生被产生的新 commit 被替换，SHA-1 由 682f3dd 变为了 56f1332。\nP.S: 如果当前只有 master 分支呢？该如何删除 commit 和合并 commit 呢？一回事儿...")]),t._v(" "),s("h2",{attrs:{id:"当-rebase-遇到冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#当-rebase-遇到冲突"}},[t._v("#")]),t._v(" 当 Rebase 遇到冲突")]),t._v(" "),s("p",[t._v("上文示例不存在冲突问题，相对比较简单，但实际情况没有这么完美，往往有一些冲突需要解决。")]),t._v(" "),s("p",[t._v("在实际开发中，我经常会面对这么一种情景：基于 dev 分支创建一个需求分支，搞定后，提交 pr，同事 review pr 时会陆陆续续指出一些问题，针对同事的问题后续又在这个分支上提交若干个 pr，终于被认可；是时候合并到 dev 分支了，但是在此过程中，dev 分支发生了一些改变（新增了若干个 commit），导致 merge 冲突，有些冲突无法手动 merge（譬如 Xcode 的工程文件.pbxconfig，该文件记录了大量信息，根本无法手动 merged）。")]),t._v(" "),s("p",[t._v("针对这种问题，比较常见的做法是，更新本地 dev 分支，然后将需求分支 rebase 到最新的 dev 分支上，此处的 rebase 过程往往会需要处理一些冲突。")]),t._v(" "),s("p",[t._v("举个稍微复杂点的例子模拟 rebase 过程中的冲突问题：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建仓库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建名为foo的文件，注入一行内容「created by master」")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" EOF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" foo\ncreated by master\nEOF\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# master分支的第一个commit - C0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C0"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个名为experiment的分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b experiment\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改foo，重新注入内容「modified by experiment, 1st」")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" EOF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" foo\nmodified by experiment, 1st\nEOF\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# experiment分支的第一个commit - E1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"E1"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改foo，重新注入内容「modified by experiment, 2st」")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" EOF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" foo\nmodified by experiment, 2st\nEOF\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# experiment分支的第一个commit - E2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"E2"')]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改foo，重新注入内容「modified by experiment, 3s」，并添加一行「appended by experiment」")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" EOF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" foo\nmodified by experiment, 3st\nappended by experiment\nEOF\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# experiment分支的第一个commit - E3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"E3"')]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切回master分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改foo，重新注入内容「modified by experiment, 3s」，并添加一行「appended by experiment」")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" EOF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" foo\nfinal"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" modified by master\nEOF\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# master分支的第一个commit - C1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C1"')]),t._v("\n")])])]),s("p",[t._v("创建两个分支：master 和 experiment。")]),t._v(" "),s("p",[t._v("master 分支的第一个 commit C0 创建一个文本文件 foo，并注入一行文本「created by master」；第二个 commit C1 修改了第一行的文本。\nexperiment 分支在 master 的 C0 的基础上创建，之后提交了 3 次 commit，第一次和第二次均只修改了第一行文本，第三个 commit 也修改了第一行文本，并且新增了第二行文本「appended by experiment」。")]),t._v(" "),s("p",[t._v("下图是更形象的描述：")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-13@2x.png"}}),t._v(" "),s("p",[t._v("现在的目标是将 experiment 分支 rebase 到 master 的最新 commit C1 上，且 experiment 分支最终 commit 的 foo 内容为：")]),t._v(" "),s("div",{staticClass:"language-textile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-textile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token phrase"}},[t._v("final! modified by master\nappended by experiment\n")])])])]),s("p",[t._v("执行命令：")]),t._v(" "),s("div",{staticClass:"language-textile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-textile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token phrase"}},[t._v("git checkout experiment\ngit rebase master\n")])])])]),s("p",[t._v("有如下警告：")]),t._v(" "),s("div",{staticClass:"language-textile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-textile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token phrase"}},[t._v("First, rewinding head to replay your work on top of it...\nApplying: E1\nUsing index info to reconstruct a base tree...\nM\tfoo\nFalling back to patching base and 3-way merge...\nAuto-merging foo\nCONFLICT (content): Merge conflict in foo\nerror: Failed to merge in the changes.\nPatch failed at 0001 E1\nThe copy of the patch that failed is found in: .git/rebase-apply/patch")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token phrase"}},[t._v('When you have resolved this problem, run "git rebase --continue".\nIf you prefer to skip this patch, run "git rebase --skip" instead.\nTo check out the original branch and stop rebasing, run "git rebase --abort".\n')])])])]),s("p",[t._v("错误信息说明：合并 E1 和 C1 时产生冲突，冲突点在文件 foo 上。")]),t._v(" "),s("p",[t._v("此时有 3 个选择：abort，continue、skip。")]),t._v(" "),s("ul",[s("li",[t._v("abort，顾名思义，放弃该 rebase")]),t._v(" "),s("li",[t._v("continue，在此之前，用户需要手动解决 E1 和 C1 的冲突，然后"),s("code",[t._v("git rebase --continue")]),t._v("通过")]),t._v(" "),s("li",[t._v("skip，略过 E1，这意味着用户愿意放弃「E1 与 C1 冲突的 patch」")])]),t._v(" "),s("p",[t._v("我认为可以这么理解 rebase 的过程：若想将 experiment 分支 rebase 到 master 分支上，先在 master 的基础上创建一个临时分支（类似于变量，记为_experiment_），然后将 experiment 分支上的 commit 对应的 patch 逐个添加到到_experiment_的 index 上，如果完全没问题，就创建一个 commit，并移动_experiment_到该 commit 上...如果有冲突，则终止该过程，给出如上的警告信息，用户可以选择 abort；也可以选择 skip，如果是 skip，则意味着忽略掉冲突的内容，没有冲突的内容仍然保留在暂存区，但不会创建 commit，接着处理下一个 commit，直到结束；如果用户在过程中选择 continue，则意味着用户不愿放弃冲突的 commit，要想游戏继续，用户得自己手动将 conflict 给干掉。")]),t._v(" "),s("p",[t._v("如下是我根据自己对 rebase 解决冲突问题的理解所写的伪代码：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("var _experiment_ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个临时分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var commit in experiment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("commits"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    var noConflict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" YES\n    var conflictFiles "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file in commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isOK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将无冲突文件添加到暂存区")]),t._v("\n            _experiment_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标记冲突")]),t._v("\n            noConflict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NO\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 缓存冲突文件")]),t._v("\n            conflictFiles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("noConflict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无冲突，创建新分支（根据commit的元信息，及暂存区的内容）")]),t._v("\n        var newCommit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createNewCommit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _experiment_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加新分支")]),t._v("\n        _experiment_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newCommit\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移动_experiment_")]),t._v("\n        _experiment_ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newCommit\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 清空index")]),t._v("\n        _experiment_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 将冲突报告给用户，等待处理")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("skip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 放弃current commit中的冲突文件，处理下一个commit")]),t._v("\n            conflictFiles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用户选择continue，并且已经解决掉了conflictFiles中的文件冲突问题")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将无冲突文件添加到暂存区")]),t._v("\n            _experiment_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("conflictFiles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建新分支（根据commit的元信息，及暂存区的内容）")]),t._v("\n            var newCommit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createNewCommit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _experiment_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加新分支")]),t._v("\n            _experiment_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newCommit\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移动_experiment_")]),t._v("\n            _experiment_ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newCommit\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 清空index")]),t._v("\n            _experiment_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("总之，要完成上述示例所要达到的目标，可以这样：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --skip  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略E1中的冲突文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --skip  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略E2中的冲突文件")]),t._v("\n")])])]),s("p",[t._v("到最后一个 commit 了，不能再 skip 了，否则最终得到的 experiment 完全和 master 一致。现在开始手动解决 foo 冲突：")]),t._v(" "),s("div",{staticClass:"language-textile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-textile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token phrase"}},[t._v("<<<<<<< 305b5e89276ff01a66760ea9c7e8d65950154b13\nfinal! modified by master\n=======\nmodified by experiment, 3st\nappended by experiment\n>>>>>>> E3 \n")])])])]),s("p",[t._v("解决结果：")]),t._v(" "),s("div",{staticClass:"language-textile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-textile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token phrase"}},[t._v("final! modified by master\nappended by experiment\n")])])])]),s("p",[t._v("然后：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" *  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不要忘了")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --continue\n")])])]),s("p",[t._v("Game over!")]),t._v(" "),s("e-img",{attrs:{src:"/image/rebase-14@2x.png"}}),t._v(" "),s("p",[s("strong",[t._v("本文参考")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://git-scm.com/book/en/v2/Git-Branching-Rebasing",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rebasing"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA",target:"_blank",rel:"noopener noreferrer"}},[t._v("变基"),s("OutboundLink")],1)])])],1)}),[],!1,null,null,null);e.default=n.exports}}]);