(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{145:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Objective-C 中的 copy 相关内容比我想象中要丰富多了。")]),t._v(" "),a("h3",{attrs:{id:"nscopying-和-nsmutablecopying-协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nscopying-和-nsmutablecopying-协议"}},[t._v("#")]),t._v(" NSCopying 和 NSMutableCopying 协议")]),t._v(" "),a("p",[t._v("使用对象时经常需要拷贝它。在 Objective-C 中，此操作是通过"),a("code",[t._v("copy")]),t._v("和"),a("code",[t._v("mutableCopy")]),t._v("方法完成的，基类"),a("code",[t._v("NSObject")]),t._v("中与 copy 相关的 API 如下：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("mutableCopy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("copyWithZone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" _NSZone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("zone OBJC_ARC_UNAVAILABLE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("mutableCopyWithZone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" _NSZone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("zone OBJC_ARC_UNAVAILABLE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("显然，"),a("code",[t._v("NSObject")]),t._v("已经实现了"),a("code",[t._v("copy")]),t._v("和"),a("code",[t._v("mutableCopy")]),t._v("方法。")]),t._v(" "),a("p",[t._v("如果想让自己的类（继承自"),a("code",[t._v("NSObject")]),t._v("，假设叫"),a("code",[t._v("CustomClass")]),t._v("）支持拷贝操作，该怎么弄呢？第一个想到的处理方式恐怕是重写"),a("code",[t._v("copy")]),t._v("方法（暂时不谈"),a("code",[t._v("mutableCopy")]),t._v("，稍后再叙）。")]),t._v(" "),a("p",[t._v("但是，这种做法是错误的。")]),t._v(" "),a("p",[t._v("正确的做法是让自定义类遵循"),a("code",[t._v("NSCopying")]),t._v("协议（"),a("code",[t._v("NSObject")]),t._v("并未遵循该协议），该协议只有一个方法：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@protocol")]),t._v(" NSCopying\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("copyWithZone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSZone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("zone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n")])])]),a("p",[t._v("简单来说，当对某个对象发送"),a("code",[t._v("copy")]),t._v("消息时，"),a("code",[t._v("NSObject#copy")]),t._v("的实现逻辑会去自动调用"),a("code",[t._v("copyWithZone:")]),t._v("方法，有点回调的感觉；因此，若想支持拷贝操作，需要在自定义类中让其支持"),a("code",[t._v("NSCopying")]),t._v("，即实现"),a("code",[t._v("copyWithZone:")]),t._v("方法，而不是重写"),a("code",[t._v("copy")]),t._v("方法。")]),t._v(" "),a("p",[t._v("参数"),a("code",[t._v("zone")]),t._v("是什么鬼？这是因为在以前开发程序时，会把内存分为不同的"),a("strong",[t._v("区")]),t._v("（zone），而对象会创建在某个区里面。现在不用了，每个程序只有一个区：默认区（default zone）。所以说，尽管必须实现"),a("code",[t._v("copyWithZone:")]),t._v("方法，但是不必担心其中的 zone 参数。")]),t._v(" "),a("p",[t._v("举个栗子，有个表示个人信息的类，可以在其接口定义中声明此类遵循"),a("code",[t._v("NSCopying")]),t._v("协议，如下：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" UserInfo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NSCopying"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nonatomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nonatomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instancetype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("initWithFirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("firstName\n                      andLastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" UserInfo\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instancetype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("initWithFirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("firstName\n                      andLastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("lastName "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        _firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("firstName copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        _lastName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("lastName copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("pragma")]),t._v(" mark - NSCopying")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instancetype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("copyWithZone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSZone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("zone "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    UserInfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("copy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" allocWithZone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("zone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" initWithFirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("_firstName\n                                                              andLastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("_lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n")])])]),a("p",[t._v("再来讲一下"),a("code",[t._v("mutableCopy")]),t._v("方法和"),a("code",[t._v("NSMutableCopying")]),t._v("协议；它们俩与"),a("code",[t._v("copy")]),t._v("方法和"),a("code",[t._v("NSCopying")]),t._v("协议相对应。当你的类还有 mutable 版本时，你还应该遵循"),a("code",[t._v("NSMutableCopying")]),t._v("协议，并实现"),a("code",[t._v("mutableCopyWithZone:")]),t._v("方法，这样，当向该类对象发送"),a("code",[t._v("mutableCopy")]),t._v("消息时，NSObject 的"),a("code",[t._v("mutableCopy")]),t._v("方法实现代码中会回调你的"),a("code",[t._v("mutableCopyWithZone:")]),t._v("方法。")]),t._v(" "),a("p",[a("strong",[t._v("Note:")]),t._v(" 虽然在自定义"),a("code",[t._v("copyWithZone:")]),t._v("和"),a("code",[t._v("mutableCopyWithZone:")]),t._v("中可以弄各种花样，但是务必保证如下逻辑：")]),t._v(" "),a("div",{staticClass:"language-textile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-textile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token phrase"}},[t._v("[CustomClass copy] -> CustomClass\n// 向immutable对象发送copy消息，得到一个immutable对象")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token phrase"}},[t._v("[MutableCustomClass copy] -> CustomClass\n// 向mutable对象发送一个copy消息，得到一个immutable对象")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token phrase"}},[t._v("[CustomClass mutableCopy] -> MutableCustomClass\n// 向immutable对象发送mutableCopy消息，得到mutable对象")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token phrase"}},[t._v("[MutableCustomClass mutableCopy] -> MutableCustomClass\n// 向mutable对象发送mutableCopy消息，得到mutable对象\n")])])])]),a("p",[t._v("下一个问题：向 immutable 对象发送"),a("code",[t._v("copy")]),t._v("消息一定会得到一个新对象吗？")]),t._v(" "),a("p",[t._v("No！下面的测试栗子所做的事情是分别向不可变的"),a("code",[t._v("NSString")]),t._v("、"),a("code",[t._v("NSArray")]),t._v("、"),a("code",[t._v("NSDictionary")]),t._v("以及"),a("code",[t._v("NSSet")]),t._v("对象发送"),a("code",[t._v("copy")]),t._v("消息，得到几个新的对象，新对象显然是 immutable 的，问题是：这些新对象真的是"),a("strong",[t._v("新")]),t._v("对象吗？如下栗子分别把新老对象的地址给打印出来：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("testString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nNSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("copyString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("testString copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"testString address = %x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"copyString address = %x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" copyString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// testString address = 79720cc0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// copyString address = 79720cc0")]),t._v("\n    \nNSArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("testArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nNSArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("copyArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("testArray copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"testArray address = %x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"copyArray address = %x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" copyArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// testArray address = 79722fb0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// copyArray address = 79722fb0")]),t._v("\n    \nNSDictionary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("testDictionary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nNSDictionary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("copyDictionary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("testDictionary copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"testDictionary address = %x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testDictionary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"copyDictionary address = %x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" copyDictionary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// testDictionary address = 79722fd0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// copyDictionary address = 79722fd0    ")]),t._v("\n    \nNSSet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("testSet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSSet setWithObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nNSSet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("copySet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("testSet copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"testSet address = %x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"copySet address = %x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" copySet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// testSet address = 79722ff0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// copySet address = 79722ff0")]),t._v("\n")])])]),a("p",[t._v("答案很明了！"),a("code",[t._v("NSString")]),t._v("、"),a("code",[t._v("NSArray")]),t._v("、"),a("code",[t._v("NSDictionary")]),t._v("以及"),a("code",[t._v("NSSet")]),t._v("，这是我们最常用的四个含有 mutable 版本的类型；向这些类型的 immutable 对象发送"),a("code",[t._v("copy")]),t._v("消息，这些对象会直接返回本身，而不是返回一个新创建的对象。")]),t._v(" "),a("p",[t._v("关于这一点，我反复使用各种姿势测试了很多次，均得到这样的结果；但是目前还没能找到比较权威的说法对这个现象进行说明。不过想想也很容易理解，对于一个 immutable 对象，真的没必要再复制一个，毕竟其中的内容不会发生改变，如果复制了，那么内存中将会存在两个一模一样的资源，岂不浪费？")]),t._v(" "),a("p",[t._v("总结这一段内容的要点如下：")]),t._v(" "),a("ul",[a("li",[t._v("若想令自己的类具备拷贝功能，则需要遵循"),a("code",[t._v("NSCopying")]),t._v("协议，实现其定义的"),a("code",[t._v("copyWithZone:")]),t._v("方法；")]),t._v(" "),a("li",[t._v("若自定义的类分为 immutable 和 mutable 版本，则需要同时遵循"),a("code",[t._v("NSCopying")]),t._v("和"),a("code",[t._v("NSMutableCopying")]),t._v("协议；")]),t._v(" "),a("li",[t._v("向 immutable 对象发送"),a("code",[t._v("copy")]),t._v("消息，并不一定会得到一个新对象；")])]),t._v(" "),a("h3",{attrs:{id:"深拷贝和浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝和浅拷贝"}},[t._v("#")]),t._v(" 深拷贝和浅拷贝")]),t._v(" "),a("p",[t._v("在很长时间里，我都认为"),a("strong",[t._v("浅拷贝")]),t._v("（shallow copy）指的是「指针拷贝」，而"),a("strong",[t._v("深拷贝")]),t._v("（deep copy）才是真正 copy 一个对象；显然，这种说法是不正确的。")]),t._v(" "),a("p",[t._v("一般来说，「深拷贝」和「浅拷贝」这两个概念是分析集合类型才会谈及的。深拷贝的意思是：在拷贝对象时，将其底层数据也一并复制过去。"),a("strong",[t._v("Foundation 框架中所有集合类型在默认情况下都执行浅拷贝，也就是说，只拷贝容器对象本身，而不复制其中数据。这样做的原因在于，容器内的对象未必能拷贝，而且调用者也未必想在拷贝容器时一并拷贝其中每一个对象。")])]),t._v(" "),a("p",[t._v("深拷贝和浅拷贝对比图如下：")]),t._v(" "),a("e-img",{attrs:{src:"/image/20150720-01.png",retina:""}}),t._v(" "),a("h3",{attrs:{id:"理解-property-中的-copy-修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解-property-中的-copy-修饰符"}},[t._v("#")]),t._v(" 理解@property 中的 copy 修饰符")]),t._v(" "),a("p",[t._v("经常看到@property 中有些对象类型属性被"),a("code",[t._v("strong")]),t._v("修饰，有些被"),a("code",[t._v("copy")]),t._v("修饰。"),a("code",[t._v("strong")]),t._v("修饰符的作用不消多说，该如何理解"),a("code",[t._v("copy")]),t._v("修饰符呢？")]),t._v(" "),a("p",[t._v("关于@property 中"),a("code",[t._v("copy")]),t._v("修饰符的使用，我曾经历了这么两个阶段：")]),t._v(" "),a("ol",[a("li",[t._v("使用"),a("code",[t._v("copy")]),t._v("修饰 mutable 类型，使用"),a("code",[t._v("strong")]),t._v("修饰 immutable 类型；")]),t._v(" "),a("li",[t._v("使用"),a("code",[t._v("copy")]),t._v("修饰 immutable 类型，使用"),a("code",[t._v("strong")]),t._v("修饰 mutable 类型；")])]),t._v(" "),a("p",[t._v("关于第 1 个阶段，我忘记了当时是怎么想的，它显然是错的；")]),t._v(" "),a("p",[t._v("关于第 2 个阶段，我之所以有这样的认识是因为曾在"),a("a",{attrs:{href:"http://stackoverflow.com/questions/387959/nsstring-property-copy-or-retain",target:"_blank",rel:"noopener noreferrer"}},[t._v("stackoverflow"),a("OutboundLink")],1),t._v("中看到了如下这么一段说明：")]),t._v(" "),a("blockquote",[a("p",[t._v("For attributes whose type is an immutable value class that conforms to the "),a("code",[t._v("NSCopying")]),t._v(" protocol, you almost always should specify "),a("code",[t._v("copy")]),t._v(" in your "),a("code",[t._v("@property")]),t._v(" declaration. Specifying retain is something you almost never want in such a situation.")])]),t._v(" "),a("p",[t._v("这句话错了吗？当然没有，要不也不会得到这么多的 votes。但为什么这么说呢？不晓得是当时没耐心还是咋地，反正没怎么思考这个问题。")]),t._v(" "),a("p",[t._v("接着以上文提到的"),a("code",[t._v("UserInfo")]),t._v("为栗子，对之进行简化，只是定义两个"),a("code",[t._v("NSString")]),t._v("属性："),a("code",[t._v("firstName")]),t._v("和"),a("code",[t._v("lastName")]),t._v("，作为对比前者使用"),a("code",[t._v("copy")]),t._v("修饰，后者使用"),a("code",[t._v("strong")]),t._v("修饰。如下：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" UserInfo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NSCopying"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nonatomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nonatomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" strong"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n")])])]),a("p",[t._v("基于"),a("code",[t._v("UserInfo")]),t._v("创建实例进行测试：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[t._v("NSMutableString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("mutableFirstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSMutableString stringWithFormat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"张"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nNSMutableString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("mutableLastName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSMutableString stringWithFormat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"不坏"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \nUserInfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("u "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("UserInfo alloc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mutableFirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastName  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mutableLastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"全名：%@%@"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print: 全名：张不坏")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 改mutableFirstName「张」为「长孙」")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mutableFirstName deleteCharactersInRange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSMakeRange")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mutableFirstName appendString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"长孙"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 改mutableLastName「不坏」为「不坏蛋」")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mutableLastName appendString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"蛋"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"全名：%@%@"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print: 全名：张不坏蛋")]),t._v("\n")])])]),a("p",[t._v("简单来说，对于 immutable 对象类型属性，假设该类型存在 mutable 版本，若使用"),a("code",[t._v("strong")]),t._v("修饰该属性，则将会是不安全的。")]),t._v(" "),a("p",[t._v("在上述代码中，"),a("code",[t._v("u.lastName")]),t._v("被"),a("code",[t._v("strong")]),t._v("修饰，对之赋值一个 mutable 类型"),a("code",[t._v("mutableLastName")]),t._v("，之后改变"),a("code",[t._v("mutableLastName的")]),t._v("值（由「不坏」变为「不坏蛋」），显然也影响到了"),a("code",[t._v("u.lastName")]),t._v("的值，这通常是我们所不希望发生的；作为对比，"),a("code",[t._v("u.firstName")]),t._v("被"),a("code",[t._v("copy")]),t._v("修饰，也为之赋值 mutable 类型"),a("code",[t._v("mutableFirstName")]),t._v("，之后也改变"),a("code",[t._v("mutableFirstName")]),t._v("的值（由「张」变为「长孙」），但是"),a("code",[t._v("u.firstName")]),t._v("不受影响。")]),t._v(" "),a("p",[t._v("再往深一点看："),a("code",[t._v("@property")]),t._v("的"),a("code",[t._v("copy")]),t._v("的作用机制是什么？根据我的理解，"),a("code",[t._v("copy")]),t._v("修饰符的意义有两点：")]),t._v(" "),a("ol",[a("li",[t._v("在系统自动合成属性的 setter 提供「指示」，使用类似于"),a("code",[t._v("_iVar = [var copy];")]),t._v("的方式进行赋值；")]),t._v(" "),a("li",[t._v("告诉使用者，安心的使用吧！")])]),t._v(" "),a("p",[t._v("因此，根据我的理解，系统合成 UserInfo 的 firstName 和 lastName 的 setter 代码如下：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setFirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("firstName "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("firstName copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setLastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("lastName "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _lastName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("写到这里，可以回答一个常见的问题了："),a("strong",[t._v("如何重写带 copy 关键字的 setter？")])]),t._v(" "),a("p",[t._v("换句话说，即便"),a("code",[t._v("firstName")]),t._v("属性被"),a("code",[t._v("copy")]),t._v("修饰，但是如果重写 setter 时采用错误的方式，"),a("code",[t._v("copy")]),t._v("带来的好处会荡然无存。譬如这样重写"),a("code",[t._v("setFirstName:")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setFirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("firstName "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("得到的结果如下（显然，"),a("code",[t._v("firstName")]),t._v("也是不安全的）：")]),t._v(" "),a("div",{staticClass:"language-textile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-textile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token phrase"}},[t._v("全名：张不坏\n全名：长孙不坏蛋\n")])])])]),a("p",[t._v("继续深挖：")]),t._v(" "),a("ol",[a("li",[t._v("是不是所有遵循"),a("code",[t._v("NSCopying")]),t._v("类型属性都应该使用"),a("code",[t._v("copy")]),t._v("修饰呢？")]),t._v(" "),a("li",[t._v("mutable 类型属性可以使用"),a("code",[t._v("copy")]),t._v("修饰吗？")])]),t._v(" "),a("p",[t._v("对于第一个问题，答案是 No！对于向"),a("code",[t._v("NSString")]),t._v("、"),a("code",[t._v("NSDictionary")]),t._v("等属性才需要使用"),a("code",[t._v("copy")]),t._v("修饰，因为它们存在 mutable 版本，在为属性赋值时，右值很可能是它们的 mutable 类型对象，若使用"),a("code",[t._v("strong")]),t._v("修饰则会带来不稳定因子；另外一个方面，如果属性类型不存在对应的 mutable 版本，则完全不用担心这点，反正你也无法在外部修改它，不稳定因子自然不存在了。")]),t._v(" "),a("p",[t._v("对于第二个问题，答案仍然是 No！被修饰符"),a("code",[t._v("copy")]),t._v("修饰的属性，默认的 setter 赋值方式是"),a("code",[t._v("_iVar = [var copy];")]),t._v("而"),a("code",[t._v("copy")]),t._v("方法返回的是 immutable 类型，将 immutable 对象赋值给 mutable 类型指针显然是不对的。")]),t._v(" "),a("p",[t._v("P.S：如果存在"),a("code",[t._v("mutableCopy")]),t._v("修饰符，或许可以使用"),a("code",[t._v("mutableCopy")]),t._v("修饰 mutable 属性^_^")]),t._v(" "),a("h3",{attrs:{id:"本文参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本文参考"}},[t._v("#")]),t._v(" 本文参考")]),t._v(" "),a("ul",[a("li",[t._v("《Effective Objective-2.0》")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://stackoverflow.com/questions/387959/nsstring-property-copy-or-retain",target:"_blank",rel:"noopener noreferrer"}},[t._v("NSString: copy 还是 retain"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.objc.io/issue-7/value-objects.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Value Objects"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://objccn.io/issue-7-2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("值对象"),a("OutboundLink")],1)])])],1)}),[],!1,null,null,null);s.default=e.exports}}]);