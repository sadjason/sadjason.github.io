(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{199:function(e,r,t){"use strict";t.r(r);var a=t(0),v=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#各种概念闲扯"}},[e._v("各种概念闲扯")]),t("ul",[t("li",[t("a",{attrs:{href:"#声明式-v-s-命令式"}},[e._v("声明式 v.s 命令式")])]),t("li",[t("a",{attrs:{href:"#依赖"}},[e._v("依赖")])]),t("li",[t("a",{attrs:{href:"#五大设计原则"}},[e._v("五大设计原则")])])])]),t("li",[t("a",{attrs:{href:"#理解-mvc"}},[e._v("理解 MVC")]),t("ul",[t("li",[t("a",{attrs:{href:"#model"}},[e._v("Model")])]),t("li",[t("a",{attrs:{href:"#view"}},[e._v("View")])]),t("li",[t("a",{attrs:{href:"#controller"}},[e._v("Controller")])]),t("li",[t("a",{attrs:{href:"#server-中的-mvc"}},[e._v("Server 中的 MVC")])]),t("li",[t("a",{attrs:{href:"#正确理解-mvc-的关键"}},[e._v("正确理解 MVC 的关键")])])])]),t("li",[t("a",{attrs:{href:"#mvp"}},[e._v("MVP")])]),t("li",[t("a",{attrs:{href:"#理解-mvvm"}},[e._v("理解 MVVM")]),t("ul",[t("li",[t("a",{attrs:{href:"#胖瘦-model"}},[e._v("胖瘦 Model")])]),t("li",[t("a",{attrs:{href:"#实际上是-mvmcv"}},[e._v("实际上是 MVMCV")])]),t("li",[t("a",{attrs:{href:"#viewmodel-的角色"}},[e._v("ViewModel 的角色")])]),t("li",[t("a",{attrs:{href:"#view-是不适合持有-viewmodel-的"}},[e._v("View 是不适合持有 ViewModel 的")])]),t("li",[t("a",{attrs:{href:"#mvvm-中的-controller"}},[e._v("MVVM 中的 Controller")])]),t("li",[t("a",{attrs:{href:"#vm-是-m、v、c-中的哪一层"}},[e._v("VM 是 M、V、C 中的哪一层")])]),t("li",[t("a",{attrs:{href:"#每个-view-都应该配备一个-viewmodel"}},[e._v("每个 View 都应该配备一个 ViewModel")])])])]),t("li",[t("a",{attrs:{href:"#横向、纵向"}},[e._v("横向、纵向")])]),t("li",[t("a",{attrs:{href:"#redux"}},[e._v("Redux")])]),t("li",[t("a",{attrs:{href:"#iop-interface-oriented-programming"}},[e._v("IOP (Interface Oriented Programming)")])])])]),t("p"),e._v(" "),t("p",[e._v("参考左神的 MVX 系列博客，内容挺多，但说服力并不是很强：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://draveness.me/mvx-model",target:"_blank",rel:"noopener noreferrer"}},[e._v("谈谈 MVX 中的 Model"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://draveness.me/mvx-view",target:"_blank",rel:"noopener noreferrer"}},[e._v("谈谈 MVX 中的 View"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://draveness.me/mvx-controller",target:"_blank",rel:"noopener noreferrer"}},[e._v("谈谈 MVX 中的 Controller"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://draveness.me/mvx",target:"_blank",rel:"noopener noreferrer"}},[e._v("浅谈 MVC、MVP 和 MVVM 架构模式"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("我认为写得比较老到的、有价值的是如下几篇；")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://casatwy.com/iosying-yong-jia-gou-tan-viewceng-de-zu-zhi-he-diao-yong-fang-an.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("iOS 应用架构谈 view 层的组织和调用方案"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://www.sprynthesis.com/2014/12/06/reactivecocoa-mvvm-introduction/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ReactiveCocoa and MVVM, an Introduction"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/33c7e2f3a613",target:"_blank",rel:"noopener noreferrer"}},[e._v("论 MVVM 伪框架结构和 MVC 中 M 的实现机制"),t("OutboundLink")],1)])]),e._v(" "),t("h1",{attrs:{id:"各种概念闲扯"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#各种概念闲扯"}},[e._v("#")]),e._v(" 各种概念闲扯")]),e._v(" "),t("h2",{attrs:{id:"声明式-v-s-命令式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#声明式-v-s-命令式"}},[e._v("#")]),e._v(" 声明式 v.s 命令式")]),e._v(" "),t("p",[e._v("如何理解声明式和命令式。")]),e._v(" "),t("h2",{attrs:{id:"依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖"}},[e._v("#")]),e._v(" 依赖")]),e._v(" "),t("p",[e._v("隐式依赖、显式依赖。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://km.sankuai.com/page/37519813",target:"_blank",rel:"noopener noreferrer"}},[e._v("组件通信方案WMScheduler"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"五大设计原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五大设计原则"}},[e._v("#")]),e._v(" 五大设计原则")]),e._v(" "),t("h1",{attrs:{id:"理解-mvc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#理解-mvc"}},[e._v("#")]),e._v(" 理解 MVC")]),e._v(" "),t("p",[e._v("Model、View、Controller 这几个概念中，Model 被讨论得最多。")]),e._v(" "),t("h2",{attrs:{id:"model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#model"}},[e._v("#")]),e._v(" Model")]),e._v(" "),t("p",[e._v("为什么 iOS 中的 Model 不能像 Server 那样，同时承担数据获取和表达的角色？")]),e._v(" "),t("p",[e._v("客户端重展示，服务端重数据。")]),e._v(" "),t("p",[e._v("MVC 没有 100% 的概念。不同端对 Model 的理解不一样。")]),e._v(" "),t("p",[e._v("对于服务端而言，Model 可能包括三部分：")]),e._v(" "),t("ul",[t("li",[e._v("DAO (Data Access Object)，直接和数据库打交道")]),e._v(" "),t("li",[e._v("Service，业务有关，对 DAO 层的更高抽象")]),e._v(" "),t("li",[e._v("Model，数据映射")])]),e._v(" "),t("p",[e._v("事实上，这种也不是绝对的，也有很多服务端框架没有这些概念，更简单地抽象成了 Service、Model 层（譬如 Egg.js）。")]),e._v(" "),t("p",[e._v("对于客户端而言，我们通常所说的 Model 层，实际上同时扮演者两个角色：")]),e._v(" "),t("ul",[t("li",[e._v("数据同步\n"),t("ul",[t("li",[e._v("主要是从 Server 拉取数据")]),e._v(" "),t("li",[e._v("可能还涉及缓存和持久化")])])]),e._v(" "),t("li",[e._v("数据表达（将 JSON 变成可读性更好的类型实例，简称「映射」，可能还包括一些校验功能）")])]),e._v(" "),t("p",[e._v("然而实际上，iOS 现有的 MVC 架构，Model 层只是起到了数据表达的作用。API 数据获取、缓存以及持久化等，常放在 Service 层中完成，所以 iOS 中 MVC 的真实结构是这样的：")]),e._v(" "),t("img",{attrs:{src:"draveness-mvcs-architecture.png"}}),e._v(" "),t("p",[e._v("Draveness 博客"),t("a",{attrs:{href:"https://draveness.me/mvx-model",target:"_blank",rel:"noopener noreferrer"}},[e._v("谈谈 MVX 中的 Model"),t("OutboundLink")],1),e._v("评论下有对 Service 是否属于 Model 层展开讨论，我认为应该从持有关系上来看。如果 Service（承担 API 以及缓存、持久化职责）内聚于 Model，那么它就是 Model 层，否则，我认为它应该被独立看成是 Service 层。")]),e._v(" "),t("p",[e._v("为啥不将 Service 的职能融合到 Model 中。")]),e._v(" "),t("p",[e._v("Dravenees 在博客里讲了一些理由，我并不能看得很懂，或者说并没有提供较强的说服力。")]),e._v(" "),t("p",[e._v("我认为可以理解的角度是：")]),e._v(" "),t("ul",[t("li",[e._v("服务端的 Model 是面向数据库的，而客户端的 Model 数据虽然也大多来自于 Server，但它更多的是为 View 服务的。换句话说，同样规模（当然并不能直接比较）的服务，客户端的 Model 要多得多，而这些 Model 并没有直接的 Service 与之对应。")])]),e._v(" "),t("h2",{attrs:{id:"view"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#view"}},[e._v("#")]),e._v(" View")]),e._v(" "),t("p",[e._v("视图和业务层并无耦合。业务层提供的数据可以为多个视图服务，视图也可以显示多个业务提供的数据。")]),e._v(" "),t("h2",{attrs:{id:"controller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#controller"}},[e._v("#")]),e._v(" Controller")]),e._v(" "),t("p",[e._v("减轻 Controller 有哪些手段：")]),e._v(" "),t("ul",[t("li",[e._v("Model 相关处理逻辑放到 Model 中（category 神马的）")]),e._v(" "),t("li",[e._v("View 相关处理逻辑放到 View 中")]),e._v(" "),t("li",[e._v("多使用 Category 分割代码")]),e._v(" "),t("li",[e._v("封装派生")])]),e._v(" "),t("h2",{attrs:{id:"server-中的-mvc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#server-中的-mvc"}},[e._v("#")]),e._v(" Server 中的 MVC")]),e._v(" "),t("p",[e._v("经典的说法：")]),e._v(" "),t("blockquote",[t("p",[e._v("Fat Models, skinny controller")])]),e._v(" "),t("p",[e._v("在绝大部分的 MVC 框架中，Controller 的作用都是将请求代理给 Model 去完成，它本身并不包含任何的业务逻辑，任何实际的查询、更新和删除操作都不应该在 Controller 层直接进行，而是要讲这些操作交给 Model 去完成。")]),e._v(" "),t("p",[e._v("Controller 的作用更像是胶水，将 Model 层中获取的模型传入 View 层中，渲染 HTML 或者返回 JSON 数据。")]),e._v(" "),t("p",[e._v("从概念上严格划分的话，服务端其实根本没有 View，拜 HTTP 协议所赐，我们平时所讨论的 View 只是用于描述 View 的字符串（更实质的应该称之为数据），真正的 View 是浏览器。")]),e._v(" "),t("h2",{attrs:{id:"正确理解-mvc-的关键"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正确理解-mvc-的关键"}},[e._v("#")]),e._v(" 正确理解 MVC 的关键")]),e._v(" "),t("ul",[t("li",[e._v("Model 是一个业务模型\n而不是轻飘飘的数据模型（只有属性，没有可供外界驱使的方法）")]),e._v(" "),t("li",[e._v("Controller")])]),e._v(" "),t("h1",{attrs:{id:"mvp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvp"}},[e._v("#")]),e._v(" MVP")]),e._v(" "),t("p",[e._v("大家在讨论对比 MVC 和 MVP 时，总会这么说：MVC 中，View 和 Model 是有通信的；而 MVP 中，View 和 Model 的通信依靠 Controller 作为中介完成。")]),e._v(" "),t("p",[e._v("参考自"),t("a",{attrs:{href:"https://stackoverflow.com/questions/2056/what-are-mvp-and-mvc-and-what-is-the-difference",target:"_blank",rel:"noopener noreferrer"}},[e._v("What are MVP and MVC and what is the difference?"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("h1",{attrs:{id:"理解-mvvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#理解-mvvm"}},[e._v("#")]),e._v(" 理解 MVVM")]),e._v(" "),t("p",[e._v("在 MVC 的基础上，把 C（或者胖 Model）拆出一个 ViewModel 专门负责数据处理的事情，就是 MVVM。")]),e._v(" "),t("h2",{attrs:{id:"胖瘦-model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#胖瘦-model"}},[e._v("#")]),e._v(" 胖瘦 Model")]),e._v(" "),t("p",[e._v("胖 Model 要达到的目的是，Controller 从胖 Model 这里拿到数据之后，不用额外做操作或者只要做非常少的操作，就能够将数据直接应用在 View 上。")]),e._v(" "),t("p",[e._v("胖 Model 相对比较难移植，虽然只是包含弱业务，但好歹也是业务，迁移的时候很容易拔出萝卜带出泥。")]),e._v(" "),t("p",[e._v("什么叫瘦 Model？瘦 Model 只负责业务数据的表达，所有业务无论强弱一律扔到 Controller。瘦 Model 要达到的目的是，尽一切可能去编写细粒度 Model，然后配套各种 helper 类或方法来对弱业务做抽象，强业务依旧交给 Controller：")]),e._v(" "),t("div",{staticClass:"language-raw extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Raw Data:\n{\n    "name":"casa",\n    "sex":"male",\n}\n\nSlimModel:\n    @property (nonatomic, strong) NSString *name;\n    @property (nonatomic, strong) NSString *sex;\n\nHelper:\n    #define Male 1;\n    #define Female 0;\n    + (BOOL)sexWithString:(NSString *)sex;\n\nController:\n    if ([Helper sexWithString:SlimModel.sex] == Male) {\n        ...\n    }\n')])])]),t("h2",{attrs:{id:"实际上是-mvmcv"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实际上是-mvmcv"}},[e._v("#")]),e._v(" 实际上是 MVMCV")]),e._v(" "),t("p",[e._v("严格来说 MVVM 其实是 MVCVM。")]),e._v(" "),t("e-img",{attrs:{ignore2x:!0,src:"http://www.sprynthesis.com/assets/images/MVMCV.svg"}}),e._v(" "),t("h2",{attrs:{id:"viewmodel-的角色"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#viewmodel-的角色"}},[e._v("#")]),e._v(" ViewModel 的角色")]),e._v(" "),t("p",[e._v("ViewModel 的典型角色：")]),e._v(" "),t("ul",[t("li",[e._v("数据加工")]),e._v(" "),t("li",[e._v("缓存、持久化")])]),e._v(" "),t("e-img",{attrs:{ignore2x:!0,src:"http://www.sprynthesis.com/assets/images/mvvm-layers.svg"}}),e._v(" "),t("h2",{attrs:{id:"view-是不适合持有-viewmodel-的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#view-是不适合持有-viewmodel-的"}},[e._v("#")]),e._v(" View 是不适合持有 ViewModel 的")]),e._v(" "),t("p",[e._v("ViewModel 往往并不是服务特定的 View。")]),e._v(" "),t("p",[e._v("View 并不适合直接持有 ViewModel。所以Controller就负责控制他们的绑定关系")]),e._v(" "),t("p",[e._v("然而 View 和 ViewModel 它们之间是互相不知道的。")]),e._v(" "),t("p",[e._v("为了让 View 和 ViewModel 之间能够有比较松散的绑定关系，于是我们使用 ReactiveCocoa，因为苹果本身并没有提供一个比较适合这种情况的绑定方法。iOS 领域里KVO，Notification，block，delegate 和 target-action 都可以用来做数据通信，从而来实现绑定，但都不如 ReactiveCocoa 提供的 RACSignal 来的优雅，如果不用 ReactiveCocoa，绑定关系可能就做不到那么松散那么好，但并不影响它还是 MVVM。")]),e._v(" "),t("h2",{attrs:{id:"mvvm-中的-controller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvvm-中的-controller"}},[e._v("#")]),e._v(" MVVM 中的 Controller")]),e._v(" "),t("p",[e._v("与数据加工相关的都搬到 ViewModel 中。")]),e._v(" "),t("p",[e._v("Controller 负责：")]),e._v(" "),t("ul",[t("li",[e._v("处理 UI 相关")]),e._v(" "),t("li",[e._v("处理 View 和 ViewModel 的绑定\n"),t("ul",[t("li",[e._v("Controller 知道应当展示哪个 View，Controller 也知道应当使用哪个 ViewModel；然而 View 和 ViewModel 它们之间是互相不知道的，所以 Controller 就负责控制他们的绑定关系。")])])])]),e._v(" "),t("h2",{attrs:{id:"vm-是-m、v、c-中的哪一层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vm-是-m、v、c-中的哪一层"}},[e._v("#")]),e._v(" VM 是 M、V、C 中的哪一层")]),e._v(" "),t("p",[e._v("我认为，这不是一个容易掰扯得清楚的事情。如果硬要归属，我认为它属于 Controller。")]),e._v(" "),t("p",[e._v("casatwy 认为它是 Model 层：")]),e._v(" "),t("blockquote",[t("p",[e._v("ViewModel 本质上算是 Model 层（因为是胖 Model 里面分出来的一部分）。")])]),e._v(" "),t("p",[e._v("我不是很同意。")]),e._v(" "),t("h2",{attrs:{id:"每个-view-都应该配备一个-viewmodel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#每个-view-都应该配备一个-viewmodel"}},[e._v("#")]),e._v(" 每个 View 都应该配备一个 ViewModel")]),e._v(" "),t("p",[e._v("这是我的同事们常常做的一件事情，但我认为这是错的。")]),e._v(" "),t("h1",{attrs:{id:"横向、纵向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#横向、纵向"}},[e._v("#")]),e._v(" 横向、纵向")]),e._v(" "),t("h1",{attrs:{id:"redux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[e._v("#")]),e._v(" Redux")]),e._v(" "),t("h1",{attrs:{id:"iop-interface-oriented-programming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#iop-interface-oriented-programming"}},[e._v("#")]),e._v(" IOP (Interface Oriented Programming)")]),e._v(" "),t("p",[e._v("如何理解面向协议编程")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://casatwy.com/tiao-chu-mian-xiang-dui-xiang-si-xiang-er-duo-tai.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://casatwy.com/tiao-chu-mian-xiang-dui-xiang-si-xiang-er-duo-tai.html"),t("OutboundLink")],1)])],1)}),[],!1,null,null,null);r.default=v.exports}}]);