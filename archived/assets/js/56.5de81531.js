(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{146:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("本文属于汇总文，对 Objective-C 语言层面的一些基础问题进行汇总，有的问题可直接在本文找到答案，有的只是提供其他博文的链接。")]),t._v(" "),a("h2",{attrs:{id:"内联函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内联函数"}},[t._v("#")]),t._v(" 内联函数")]),t._v(" "),a("p",[t._v("内联函数，是一个很老的概念，在其他语言譬如 C++语言中也出现了。所谓内联函数，指的是：有函数的结构，但不具备函数的性质，类似于宏替换功能的代码块。")]),t._v(" "),a("p",[t._v("在实际应用中，常常把规模较小、逻辑较简单的操作定义成内联函数，定义内联函数只要在函数前面加上"),a("code",[t._v("inline")]),t._v("关键字修饰即可；站在编译器的角度，处理内联函数就是在每个它的调用点上「内联地」展开。假设有定义如下函数：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNavigationTitleWithCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSString stringWithFormat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"已选中%d项"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("cnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("则编译器对如下代码")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[t._v("UILabel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("label "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("UILabel new"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlabel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNavigationTitleWithCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("的处理，如同对如下代码代码的处理：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[t._v("UILabel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("label "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("UILabel new"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlabel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSString stringWithFormat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"已选中%d项"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("一句话说明："),a("strong",[t._v("程序在调用内联函数时的开销和调用宏的开销是一样的，但内联函数显然比宏要强大一些，至少它保证了类型安全")]),t._v("；相较于普通函数，调用内联函数没有「保护现场、push 栈、pop 栈等等」之类的开销。")]),t._v(" "),a("p",[t._v("内联函数的好处显而易见，但并不是所有函数都可以形成真正的内联函数。如上所述，定义一个内联函数只要在定义时加上"),a("code",[t._v("inline")]),t._v("关键字即可，但能否形成真正的内联函数，还要看编译器对内联函数体内部定义的具体处理。")]),t._v(" "),a("p",[t._v("一般来说，内联函数定义的代码量逻辑简单、代码量小，并且属于那种频繁使用的代码块；"),a("strong",[t._v("内联函数不能使用循环语句，不能使用递归调用")]),t._v("；")]),t._v(" "),a("h2",{attrs:{id:"const-的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const-的使用"}},[t._v("#")]),t._v(" const 的使用")]),t._v(" "),a("p",[t._v("在 Objective-C 代码中，经常需要定义一些常量指针，譬如 AFNetworking 中有如下代码：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" AFNetworkingReachabilityDidChangeNotification"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" AFNetworkingReachabilityNotificationStatusItem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("和其他语言一样，定义常量的关键字是"),a("code",[t._v("const")]),t._v("，但问题是常常不知道"),a("code",[t._v("const")]),t._v("该往哪里放，"),a("code",[t._v("NSString * const XXOO")]),t._v("还是"),a("code",[t._v("NSString const * XXOO")]),t._v("？")]),t._v(" "),a("p",[t._v("其实，在 Objective-C 中还好一点，C/C++中"),a("code",[t._v("const")]),t._v("的各种使用姿势更难懂，如下：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" label1       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" label2       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" label3       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" label4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("经常傻傻分不清楚。不过还好，脑子恰好还残留着一些本科老师讲过的内容，记得本科 C 语言老师教过一种简单的记忆方法：const 总是修饰其左边的东东，如果其左边没有东东，则修饰右边的东东。")]),t._v(" "),a("p",[t._v("如何理解呢？对于"),a("code",[t._v("char const * label2")]),t._v("而言，const 的左边是 char，所以 const 修饰的是 char 本身，即内容本身，所以表示“label1 指向的内容是常量，不可变”；对于"),a("code",[t._v("const char * label1")]),t._v("而言，const 左边没有东东，所以它修饰右边的东东，即 char，所以表示“label2 指向的内容是常量，不可变”；对于"),a("code",[t._v("char * const label3")]),t._v("，const 左边的东东是*，所以修饰的是指针，即表示“label3 指针本身是常量，不可变”，所以解释如下：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" label1       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内容是常量，不可变")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" label2       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内容是常量，不可变")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" label3       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指针是常量，不可变")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" label4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指针和内容都是常量，不可变")]),t._v("\n")])])]),a("p",[t._v("这个判断方法同样适用于 Objective-C，所以如下代码是没问题的：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// const的左边是NSString，修饰的是NSString对象，表示“NSString对象本身不可修改”（但指针可以）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" NSString "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" testString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"I am an iOS developer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("viewDidLoad "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" viewDidLoad"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    testString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"我是一个iOS开发者"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 合法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%@"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// print "我是一个iOS开发者"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("但如下代码不合法：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// const的左边是*，修饰的是指针本身，表示testString地址值不可修改")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" testString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"I am an iOS developer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("viewDidLoad "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" viewDidLoad"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    testString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"我是一个iOS开发者"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%@"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"mm-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mm-文件"}},[t._v("#")]),t._v(" .mm 文件")]),t._v(" "),a("ul",[a("li",[t._v(".m 文件是 Objective-C 文件")]),t._v(" "),a("li",[t._v(".mm 文件相当于 C++或者 C 文件")])]),t._v(" "),a("h2",{attrs:{id:"extension-和-category"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extension-和-category"}},[t._v("#")]),t._v(" Extension 和 Category")]),t._v(" "),a("p",[t._v("参考：http://blog.csdn.net/leikezhu1981/article/details/19091049")]),t._v(" "),a("h2",{attrs:{id:"compiler-directives"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiler-directives"}},[t._v("#")]),t._v(" Compiler Directives")]),t._v(" "),a("p",[t._v("http://nshipster.com/at-compiler-directives/")]),t._v(" "),a("p",[t._v("http://blog.sunnyxx.com/2014/04/13/objc_dig_interface/")]),t._v(" "),a("h2",{attrs:{id:"pragma"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pragma"}},[t._v("#")]),t._v(" #pragma")]),t._v(" "),a("p",[t._v("详细内容参考"),a("a",{attrs:{href:"http://nshipster.cn/pragma/",target:"_blank",rel:"noopener noreferrer"}},[t._v("NSHipster -- #pragma"),a("OutboundLink")],1),t._v("和"),a("router-link",{attrs:{to:"/pragma/"}},[t._v("预处理指令#pragma")]),t._v("。")],1),t._v(" "),a("h2",{attrs:{id:"_0-nil-nil-null-nsnull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-nil-nil-null-nsnull"}},[t._v("#")]),t._v(" 0/nil/Nil/NULL/NSNull")]),t._v(" "),a("p",[t._v("这一部分内容摘自"),a("a",{attrs:{href:"http://nshipster.cn/nil/",target:"_blank",rel:"noopener noreferrer"}},[t._v("nil/Nil/NULL/NSNull"),a("OutboundLink")],1),t._v("，原文详见"),a("a",{attrs:{href:"http://nshipster.com/nil/",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("理解「不存在」的概念不仅仅是一个哲学的问题，也是一个实际的问题。我们是有形宇宙的居民，而原因在于逻辑宇宙的存在不确定性。作为一个逻辑系统的物理体现，电脑面临一个棘手的问题，就是如何用存在表达「不存在」。")]),t._v(" "),a("p",[t._v("在 Objective－C 中，有几个不同种类的「不存在」。C 语言用"),a("code",[t._v("0")]),t._v("来作为不存在的原始值，而"),a("code",[t._v("NULL")]),t._v("作为指针（这在指针环境中相当于"),a("code",[t._v("0")]),t._v("）。")]),t._v(" "),a("p",[t._v("Objective-C 在 C 的基础上增加了"),a("code",[t._v("nil")]),t._v("。"),a("code",[t._v("nil")]),t._v("是一个指向不存在的对象指针，虽然它在语义上与"),a("code",[t._v("NULL")]),t._v("不同，但它们在技术上是相等的。")]),t._v(" "),a("p",[t._v("在框架层面，Foundation 定义了"),a("code",[t._v("NSNull")]),t._v("，"),a("code",[t._v("NSNull")]),t._v("中有一个类方法"),a("code",[t._v("+null")]),t._v("，它返回一个单独的"),a("code",[t._v("NSNull")]),t._v("对象。NSNull 与 nil 以及 NULL 不同，因为它是一个实际的对象，而不是一个零值。")]),t._v(" "),a("p",[t._v("另外，在"),a("a",{attrs:{href:"https://gist.github.com/4469665",target:"_blank",rel:"noopener noreferrer"}},[t._v("Foundation/NSObjCRuntime.h"),a("OutboundLink")],1),t._v("中，"),a("code",[t._v("Nil")]),t._v("被定义为指向零的类指针，可以把它看做是"),a("code",[t._v("nil")]),t._v("的表亲。虽然它鲜为人知，但至少值得注意一下。")]),t._v(" "),a("p",[t._v("总的来说，这里的四个表达没有的值是每个 Objective-C 程序员都应该知道的：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("标志")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("NULL")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("(void *)0")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("C 指针的字面零值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("nil")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("(id)0")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Objective-C 对象的字面零值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Nil")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("(Class)0")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Objective-C 类的字面零值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("NSNull")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("[NSNull null]")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("用来表示零值的单独的对象")])])])]),t._v(" "),a("h2",{attrs:{id:"关于-nil-的一些事儿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于-nil-的一些事儿"}},[t._v("#")]),t._v(" 关于 nil 的一些事儿")]),t._v(" "),a("p",[t._v("刚被分配的 NSObject 的内容被设置为 0。也就是说那个对象所有的指向其他对象的指针都从"),a("code",[t._v("nil")]),t._v("开始，所以在"),a("code",[t._v("init")]),t._v("方法中设置"),a("code",[t._v("self.(association) = nil")]),t._v("之类的表达是没有必要的。")]),t._v(" "),a("p",[t._v("当然，也许 nil 最显著的行为是，它虽然为零，仍然可以有消息发送给它。在其他的语言中，比如 C++，这样做会使你的程序崩溃，"),a("strong",[t._v("但在 Objective-C 中，在"),a("code",[t._v("nil")]),t._v("上调用方法返回一个零值")]),t._v("。这大大的简化了表达，因为它避免了在使用"),a("code",[t._v("nil")]),t._v("之前对它的检查。")]),t._v(" "),a("h2",{attrs:{id:"isequal-和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isequal-和"}},[t._v("#")]),t._v(" isEqual:和==")]),t._v(" "),a("p",[t._v("参考http://nshipster.com/equality/。")]),t._v(" "),a("h2",{attrs:{id:"基本数据类型长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型长度"}},[t._v("#")]),t._v(" 基本数据类型长度")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("名字")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("typedef（32bit/64bit）")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("长度（32bit/64bit）（单位：bit）")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("32/32")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("long")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("32/64")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("long long")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("64/64")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("NSInteger")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("int/long")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("32/64")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("float")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("32/32")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("double")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("64/64")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("long double")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("128/128")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("CGFloat")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("float/double")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("32/64")])])])]),t._v(" "),a("p",[t._v("对于"),a("code",[t._v("int")]),t._v("、"),a("code",[t._v("long")]),t._v("、"),a("code",[t._v("float")]),t._v("、"),a("code",[t._v("double")]),t._v("，在不同的平台下（32 位和 64 位）下唯一有区别的是"),a("code",[t._v("long")]),t._v("，其余三个在不同硬件平台所占据数据长度是一致的；至于"),a("code",[t._v("NSInteger")]),t._v("和"),a("code",[t._v("NSFloat")]),t._v("，数据长度和平台完全对应，由此可见，基于 Cocoa 编程尽可能使用"),a("code",[t._v("NSInteger")]),t._v("和"),a("code",[t._v("NSFloat")]),t._v("，而不直接使用"),a("code",[t._v("int")]),t._v("、"),a("code",[t._v("float")]),t._v("等。")]),t._v(" "),a("p",[t._v("P.S：与"),a("code",[t._v("NSInteger")]),t._v("和"),a("code",[t._v("int")]),t._v("对应的是"),a("code",[t._v("NSUInteger")]),t._v("和"),a("code",[t._v("unsigned int")]),t._v("，但是不存在所谓的"),a("code",[t._v("unsigned float")]),t._v("和"),a("code",[t._v("CGUFloat")]),t._v("哦！")]),t._v(" "),a("p",[a("code",[t._v("int")]),t._v("和"),a("code",[t._v("long")]),t._v("的最大值和最小值比较容易计算，"),a("code",[t._v("float")]),t._v("和"),a("code",[t._v("double")]),t._v("的最大值和最小值计算则麻烦多了，IEEE-754 协议对此专门做了定义，详见"),a("a",{attrs:{href:"http://baike.baidu.com/view/1698149.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("百度百科：IEEE-754"),a("OutboundLink")],1),t._v("和"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/IEEE_floating_point",target:"_blank",rel:"noopener noreferrer"}},[t._v("wiki: IEEE floating point"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"import"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import"}},[t._v("#")]),t._v(" #import")]),t._v(" "),a("p",[a("strong",[t._v("#import v.s #include")])]),t._v(" "),a("p",[a("code",[t._v("#import")]),t._v("和"),a("code",[t._v("#include")]),t._v("的作用类似：都是先要求"),a("strong",[t._v("预处理器")]),t._v("读取某个文件（一般是头文件），然后将读入的内容添加至输出到对应的位置；或者简单来说，二者都用作"),a("strong",[t._v("导入文件")]),t._v("。前者确保"),a("strong",[t._v("预处理器")]),t._v("对指定的文件只导入一次，后者则允许多次导入同一个文件。")]),t._v(" "),a("p",[a("strong",[t._v("尖括号 v.s 双引号")])]),t._v(" "),a("p",[t._v("如果使用尖括号（"),a("code",[t._v("<>")]),t._v("），则编译器会先在预先设定好的标准目录下查找相应的文件（譬如系统头文件）；如果使用双引号（"),a("code",[t._v('""')]),t._v("），则编译器会先在项目目录下查找相应的头文件。")]),t._v(" "),a("p",[a("strong",[t._v("#import v.s @import")])]),t._v(" "),a("p",[t._v("如下内容摘自"),a("a",{attrs:{href:"http://www.cnblogs.com/sammyCoding/p/3654743.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("在 ios 7 下，使用@import 代替#import"),a("OutboundLink")],1),t._v("：")]),t._v(" "),a("blockquote",[a("p",[t._v("在 xcode 5 下，为了更易于开发，增加了 modules 和 auto-linking 这两个新特性。用 @import 来增加框架 到项目中比用 #import 会更有效. 我们来看看为什么：")]),t._v(" "),a("blockquote",[a("p",[t._v("Modules for system frameworks speed build time and provide an alternate means to import APIs from the SDK instead of using the C preprocessor. Modules provide many of the build-time improvements of precompiled headers with less maintenance or need for optimization. They are designed for easy adoption with little or no source changes. Beyond build-time improvements, modules provide a cleaner API model that enables many great features in the tools, such as Auto Linking.")])])]),t._v(" "),a("blockquote",[a("p",[t._v('Modules and auto-linking 默认情况下是 enabled 的。 如果是旧的项目，你可以通过设置"Language - Modules." 来设置 Enable Modules 和 Link Frameworks Automatically 为 Yes。\n另外一个使用 moudules 的好处是你再也不用去链接你的 framework 到你的项目了。\n例如，在以前，如果你要使用 MapKit 这个框架，你要这样做')])]),t._v(" "),a("ol",[a("li",[t._v("使用语句 #import <MapKit/MapKit.h> 导入框架")]),t._v(" "),a("li",[t._v('去到项目的 build phases 设置项，找到 MapKit.framework.并加入到 Link Binary With Libraries 里面。\n如果使用 modules 的话，只需要加入语句 "@import MapKit;" 你就可以开始使用了,根本不需要链接到你的项目。')])]),t._v(" "),a("p",[t._v("更多内容参考"),a("a",{attrs:{href:"http://stackoverflow.com/questions/18947516/import-vs-import-ios-7",target:"_blank",rel:"noopener noreferrer"}},[t._v("stackoverflow: @import vs #import - iOS 7"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"弱引用的自动置零特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#弱引用的自动置零特性"}},[t._v("#")]),t._v(" 弱引用的自动置零特性")]),t._v(" "),a("p",[t._v("当某个由弱引用指向的对象被释放时，相应的指针变量会被"),a("strong",[t._v("归零")]),t._v("（zerod），即赋为"),a("code",[t._v("nil")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"多态、动态类型和动态绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态、动态类型和动态绑定"}},[t._v("#")]),t._v(" 多态、动态类型和动态绑定")]),t._v(" "),a("p",[a("strong",[t._v("什么是多态")])]),t._v(" "),a("p",[t._v("一句话解释：不同对象对同一个消息的不同响应。")]),t._v(" "),a("p",[a("strong",[t._v("什么是动态绑定")])]),t._v(" "),a("p",[t._v("「动态绑定」是指在执行期间（非编译期）判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。")]),t._v(" "),a("p",[a("strong",[t._v("动态类型 id")])]),t._v(" "),a("p",[a("code",[t._v("id")]),t._v("数据类型是一种通用的对象类型。也就是说，它可以用来存储任何对象。在代码中可以向 id 类型发送任何消息，Objective-C 系统（编译器）不会在编译期对之进行类型检验，只有运行到相关代码时才会判断所引用对象的实际类型，然后根据实际的类型调用其相应的方法。")]),t._v(" "),a("p",[t._v("举个例子说明：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("number isEqualToString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"whatTheFuck"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"见鬼了"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上述代码中，首先创建一个 NSNumber 类型实例，并把它赋给"),a("code",[t._v("id")]),t._v("类型变量 number；在 if 语句中，向 number 发送"),a("code",[t._v("isEqualToString:")]),t._v("消息，根据我们对 NSNumber 的了解，它是没有定义"),a("code",[t._v("isEqualToString:")]),t._v("方法的，因此不会对这个消息进行响应。然而，这段代码完全可以以「0 error、0 warning」通过编译，只是在运行时会抛出 NSInvalidArgumentException 异常：\nreason: '-[__NSCFNumber isEqualToString:]: unrecognized selector sent to instance 0x7bf67200'")]),t._v(" "),a("p",[t._v("这个示例形象阐述「动态绑定」的含义，并且验证了「id 类型可以用来存储任何对象」的说法。")]),t._v(" "),a("p",[a("strong",[t._v("Objective-C 如何实现多态的")])]),t._v(" "),a("p",[t._v("根据上述对「多态」、「动态绑定」以及「动态类型 id」的解释，可以直接回答：Objective-C 实现多态的方式是动态绑定。")]),t._v(" "),a("p",[t._v("P.S：也有人认为「继承体系中方法重载也是实现多态的一种方式」，笔者对此比较疑惑，因为我总觉得「动态绑定」已将此包括进去了。")]),t._v(" "),a("h2",{attrs:{id:"synthesize-v-s-dynamic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synthesize-v-s-dynamic"}},[t._v("#")]),t._v(" @synthesize v.s @dynamic")]),t._v(" "),a("p",[t._v("引用"),a("a",{attrs:{href:"http://stackoverflow.com/questions/1160498/synthesize-vs-dynamic-what-are-the-differences",target:"_blank",rel:"noopener noreferrer"}},[t._v("stackoverflow: @synthesize vs @dynamic, what are the differences?"),a("OutboundLink")],1),t._v("：")]),t._v(" "),a("blockquote",[a("p",[t._v("@synthesize will generate getter and setter methods for your property. @dynamic just tells the compiler that the getter and setter methods are implemented not by the class itself but somewhere else (like the superclass or will be provided at runtime).")])]),t._v(" "),a("p",[t._v("简单来说，"),a("code",[t._v("@synthesize")]),t._v("的作用是：指示编译器，让其在编译期间自动生成 getter/setter 方法；当有自定义的 setter 或 getter 实现时，自定义 setter 或 getter 会屏蔽自动生成的 setter 或 getter。不晓得从什么时候开始，Xcode 默认帮助合成属性，无需显式使用"),a("code",[t._v("@synthesize")]),t._v("指令。")]),t._v(" "),a("p",[t._v("P.S：根据我的理解，准确来说，"),a("code",[t._v("@synthesize")]),t._v("的作用还包括「自动合成 property 对应的实例变量」，当然，如果已然有对应的实例变量存在，则会略过。比如说 property 名为 foo，存在一个名为_foo 的实例变量，那么就不会再自动合成新变量了。总之，"),a("code",[t._v("@synthesize")]),t._v("是一个帮助省功夫的指令。")]),t._v(" "),a("p",[t._v("P.S：不晓得为什么，当对某个属性同时自定义 setter 和 getter 时，XCode 要求必须显式书写"),a("code",[t._v("@synthesize")]),t._v("，如下：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" UserInfo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nonatomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" UserInfo\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@synthesize")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n")])])]),a("p",[t._v("而"),a("code",[t._v("@dynamic")]),t._v("告诉编译器，不在编译期自动生成 getter/setter 方法，setter 和 getter 会在 runtime 提供。"),a("code",[t._v("@dynamic")]),t._v("的主要应用场景是 Core Data，除此之外，在 category 使用关联属性时也会用到。")])])}),[],!1,null,null,null);e.default=n.exports}}]);