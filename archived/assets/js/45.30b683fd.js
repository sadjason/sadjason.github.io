(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{149:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("本文记录 ARC、Block、RunLoop 相关的知识点。")]),t._v(" "),s("p",[t._v("先抛出相关问题用以自查：")]),t._v(" "),s("ul",[s("li",[t._v("对象的引用计数存在哪里？")]),t._v(" "),s("li",[t._v("AutoreleasePool 是什么？")]),t._v(" "),s("li",[t._v("AutoreleasePool 和线程是什么关系？")]),t._v(" "),s("li",[t._v("@autoreleasepool 到底是什么？")]),t._v(" "),s("li",[t._v("main 函数的 @autoreleasepool{} 有什么用？")]),t._v(" "),s("li",[t._v("weak 的实现原理？")]),t._v(" "),s("li",[t._v("为什么对 block 使用 copy？")]),t._v(" "),s("li",[t._v("可以通过指针间接修改自动变量吗？")]),t._v(" "),s("li",[t._v("__block 的作用？")]),t._v(" "),s("li",[t._v("如何实现一个支持 cancel 的block？")]),t._v(" "),s("li",[t._v("如何实现一个只执行一次的 block？")]),t._v(" "),s("li",[t._v("KVO 的实现原理？")])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#arc"}},[t._v("ARC")]),s("ul",[s("li",[s("a",{attrs:{href:"#retain、release、dealloc"}},[t._v("retain、release、dealloc")])]),s("li",[s("a",{attrs:{href:"#对象的引用计数存在哪里？"}},[t._v("对象的引用计数存在哪里？")])]),s("li",[s("a",{attrs:{href:"#autoreleasepool"}},[t._v("AutoreleasePool")])]),s("li",[s("a",{attrs:{href:"#autorelease-方法"}},[t._v("- autorelease 方法")])]),s("li",[s("a",{attrs:{href:"#autorelease-对象什么时候被释放"}},[t._v("Autorelease 对象什么时候被释放")])]),s("li",[s("a",{attrs:{href:"#autoreleasepool-到底是什么"}},[t._v("@autoreleasepool 到底是什么")])]),s("li",[s("a",{attrs:{href:"#main-函数的-autoreleasepool-有什么用"}},[t._v("main 函数的 @autoreleasepool{} 有什么用")])]),s("li",[s("a",{attrs:{href:"#weak-的实现原理"}},[t._v("weak 的实现原理")])])])]),s("li",[s("a",{attrs:{href:"#block"}},[t._v("Block")]),s("ul",[s("li",[s("a",{attrs:{href:"#block-的结构"}},[t._v("Block 的结构")])]),s("li",[s("a",{attrs:{href:"#为什么对-block-使用-copy"}},[t._v("为什么对 block 使用 copy")])]),s("li",[s("a",{attrs:{href:"#变量捕获概述"}},[t._v("变量捕获概述")])]),s("li",[s("a",{attrs:{href:"#可以通过指针间接修改自动变量吗"}},[t._v("可以通过指针间接修改自动变量吗")])]),s("li",[s("a",{attrs:{href:"#block"}},[t._v("__block")])]),s("li",[s("a",{attrs:{href:"#如何实现一个-cancelable-的-block"}},[t._v("如何实现一个 cancelable 的 block")])])])]),s("li",[s("a",{attrs:{href:"#kvo-kvc"}},[t._v("KVO & KVC")]),s("ul",[s("li",[s("a",{attrs:{href:"#apple-用什么方式实现对一个对象的-kvo？"}},[t._v("apple 用什么方式实现对一个对象的 KVO？")])]),s("li",[s("a",{attrs:{href:"#触发-kvo-相关"}},[t._v("触发 KVO 相关")])])])])])]),s("p"),t._v(" "),s("h1",{attrs:{id:"arc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arc"}},[t._v("#")]),t._v(" ARC")]),t._v(" "),s("p",[t._v("关键是理解 Autorelease，参考两篇博客就够了：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://blog.sunnyxx.com/2014/10/15/behind-autorelease/",target:"_blank",rel:"noopener noreferrer"}},[t._v("黑幕背后的 Autorelease"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://draveness.me/autoreleasepool",target:"_blank",rel:"noopener noreferrer"}},[t._v("自动释放池的前世今生：深入解析 autoreleasepool"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"retain、release、dealloc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#retain、release、dealloc"}},[t._v("#")]),t._v(" retain、release、dealloc")]),t._v(" "),s("p",[t._v("一个对象与内存有关的基本操作：")]),t._v(" "),s("ul",[s("li",[t._v("retain: 持有对象，本质是使对象的引用计数加 1")]),t._v(" "),s("li",[t._v("release: 释放对象，本质是使对象的引用计数减 1")]),t._v(" "),s("li",[t._v("dealloc: 摧毁对象，对象的引用计数为 0 后，runtime 调用 dealloc 废弃对象")])]),t._v(" "),s("blockquote",[s("p",[t._v("dealloc 的调用是自发的，即封装在 release 里？还是需要外部调用？并没有详细去探究，但我的猜测它是封装在 release 里。")])]),t._v(" "),s("h2",{attrs:{id:"对象的引用计数存在哪里？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的引用计数存在哪里？"}},[t._v("#")]),t._v(" 对象的引用计数存在哪里？")]),t._v(" "),s("p",[t._v("存在 isa 指针里，详见"),s("a",{attrs:{href:"https://draveness.me/rr",target:"_blank",rel:"noopener noreferrer"}},[t._v("黑箱中的 retain 和 release"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"autoreleasepool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autoreleasepool"}},[t._v("#")]),t._v(" AutoreleasePool")]),t._v(" "),s("p",[t._v("摘自"),s("a",{attrs:{href:"http://blog.sunnyxx.com/2014/10/15/behind-autorelease/",target:"_blank",rel:"noopener noreferrer"}},[t._v("黑幕背后的 Autorelease"),s("OutboundLink")],1),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("AutoreleasePool 并没有单独的结构，而是由若干个 AutoreleasePoolPage 以双向链表的形式组合而成")]),t._v(" "),s("li",[t._v("AutoreleasePool 和线程是一一对应的")]),t._v(" "),s("li",[t._v("AutoreleasePoolPage 每个对象会开辟 4K 字节内存（也就是虚拟内存一页的大小），除了上面的实例变量所占空间，剩下的空间全部用来储存 autorelease 对象的地址")]),t._v(" "),s("li",[t._v("一个 AutoreleasePoolPage 的空间被占满时，会新建一个 AutoreleasePoolPage 对象，连接链表，后来的 autorelease 对象在新的 page 加入")])]),t._v(" "),s("p",[t._v("不是很清楚，线程和 AutoreleasePool 是如何在一起的？")]),t._v(" "),s("h2",{attrs:{id:"autorelease-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autorelease-方法"}},[t._v("#")]),t._v(" - autorelease 方法")]),t._v(" "),s("p",[t._v("向一个对象发送"),s("code",[t._v("-autorelease")]),t._v("消息，就是将这个对象加入到当前 AutoreleasePoolPage 的栈顶 next 指针指向的位置。")]),t._v(" "),s("h2",{attrs:{id:"autorelease-对象什么时候被释放"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autorelease-对象什么时候被释放"}},[t._v("#")]),t._v(" Autorelease 对象什么时候被释放")]),t._v(" "),s("p",[t._v("在没有手加 Autorelease Pool 的情况下，Autorelease 对象是在当前的 runloop 迭代结束时释放的，而它能够释放的原因是系统在每个 runloop 迭代中都加入了自动释放池 Push 和 Pop。")]),t._v(" "),s("p",[t._v("App 启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 _wrapRunLoopWithAutoreleasePoolHandler()。")]),t._v(" "),s("p",[t._v("第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 _objc_autoreleasePoolPush() 创建自动释放池。其 order 是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。")]),t._v(" "),s("p",[t._v("第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用_objc_autoreleasePoolPop() 和 _objc_autoreleasePoolPush() 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 _objc_autoreleasePoolPop() 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。")]),t._v(" "),s("h2",{attrs:{id:"autoreleasepool-到底是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autoreleasepool-到底是什么"}},[t._v("#")]),t._v(" @autoreleasepool 到底是什么")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("autoreleasepool "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上述代码的本质是：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sentinelObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("objc_autoreleasePoolPush")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do whatever you want")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("objc_autoreleasePoolPop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sentinelObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("sentinelObj")]),t._v("是一个哨兵对象（"),s("code",[t._v("nil")]),t._v("值）")]),t._v(" "),s("li",[t._v("每次执行"),s("code",[t._v("objc_autoreleasePoolPush")]),t._v("，都会向当前 AutoreleasePoolPage 添加一个哨兵对象")]),t._v(" "),s("li",[s("code",[t._v("objc_autoreleasePoolPop")]),t._v("的入参是哨兵对象\n"),s("ul",[s("li",[t._v("根据传入的哨兵对象地址找到哨兵对象所处的 page")]),t._v(" "),s("li",[t._v("在当前 page 中，将晚于哨兵对象插入的所有 autorelease 对象都发送一次"),s("code",[t._v("-release")]),t._v("消息（"),s("code",[t._v("objc_autorelease")]),t._v("），并向回移动 next 指针到正确位置")]),t._v(" "),s("li",[t._v("从最新加入的对象一直向前清理，可以向前跨越若干个 page，直到哨兵所在的 page")])])])]),t._v(" "),s("p",[t._v("如果没有理解透彻，很可能形成这样的错误认识："),s("code",[t._v("@autorelease {}")]),t._v("会作用域开头创建一个 pool，在作用域末尾将 poo 给清掉，实际上不是这样的；它所做的事情不过是在作用域开始时添加一个哨兵，结束时根据哨兵，处理掉附着在其上的 autorelease 对象")]),t._v(" "),s("h2",{attrs:{id:"main-函数的-autoreleasepool-有什么用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#main-函数的-autoreleasepool-有什么用"}},[t._v("#")]),t._v(" main 函数的 @autoreleasepool{} 有什么用")]),t._v(" "),s("p",[t._v("我的判断（以及老司机英科的判断）是：没什么卵用。只是为了好看。")]),t._v(" "),s("h2",{attrs:{id:"weak-的实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#weak-的实现原理"}},[t._v("#")]),t._v(" weak 的实现原理")]),t._v(" "),s("h1",{attrs:{id:"block"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#block"}},[t._v("#")]),t._v(" Block")]),t._v(" "),s("h2",{attrs:{id:"block-的结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#block-的结构"}},[t._v("#")]),t._v(" Block 的结构")]),t._v(" "),s("p",[t._v("参考"),s("a",{attrs:{href:"https://www.jianshu.com/p/9ff40ea1cee5",target:"_blank",rel:"noopener noreferrer"}},[t._v("iOS Block原理探究以及循环引用的问题"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("block 对象本质上是一个结构体，大概长这样")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("__block_impl")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("isa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" int32_t flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// contains ref count")]),t._v("\n    int32_t reserved"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("FuncPtr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Block_descriptor_1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("descriptor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    variables"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// block捕获的变量，block 能够访问它外部的局部变量，就是因为将这些变量（或变量的地址）复制到了结构体中。这部分接下来会写到。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("更详细的结构信息就不深究了...")]),t._v(" "),s("h2",{attrs:{id:"为什么对-block-使用-copy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么对-block-使用-copy"}},[t._v("#")]),t._v(" 为什么对 block 使用 copy")]),t._v(" "),s("p",[t._v("block 使用 copy 是从 MRC 遗留下来的传统，在 MRC 中，方法内部的 block 是在栈区的，使用 copy 可以把它放到堆区。在 ARC 中写不写都行，因为 block 都是在堆上的：对于 block 使用 copy 还是 strong 效果是一样的，但写上 copy 也无伤大雅，还能时刻提醒我们：编译器自动对 block 进行了 copy 操作。")]),t._v(" "),s("blockquote",[s("p",[t._v("详见"),s("a",{attrs:{href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html#//apple_ref/doc/uid/TP40011210-CH8-SW12",target:"_blank",rel:"noopener noreferrer"}},[t._v("Programming with Objective-C: Objects Use Properties to Keep Track of Blocks"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"变量捕获概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量捕获概述"}},[t._v("#")]),t._v(" 变量捕获概述")]),t._v(" "),s("p",[t._v("外部变量有四种：自动变量、静态变量、静态全局变量、全局变量。")]),t._v(" "),s("p",[t._v("自动变量存储在栈中，当超出作用域后，就被释放；block 捕获的变量，会被编译器 copy 到 block 对象的结构体中。")]),t._v(" "),s("p",[t._v("其他变量存放在堆中。")]),t._v(" "),s("h2",{attrs:{id:"可以通过指针间接修改自动变量吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可以通过指针间接修改自动变量吗"}},[t._v("#")]),t._v(" 可以通过指针间接修改自动变量吗")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("blk_t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" ViewController\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("viewDidLoad "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" viewDidLoad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        blk_t "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("blk_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("touchesBegan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSSet"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("UITouch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("touches withEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UIEvent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("blk_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("ARC 下的运行结果：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2,2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1073741825,2")]),t._v(" //点击\n")])])]),s("p",[t._v("这段代码说明，变量作用域结束时，该作用域栈上的自动变量就被释放了，因此，不能通过指针访问原来的自动变量。栈上的变量被释放掉了，因此通过点击访问释放掉的变量就会得到意想不到的值。")]),t._v(" "),s("h2",{attrs:{id:"block-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#block-2"}},[t._v("#")]),t._v(" __block")]),t._v(" "),s("p",[t._v("如下代码中包含被"),s("code",[t._v("__block")]),t._v("修饰的变量：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  __block "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("blk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("__block")]),t._v("的作用是告诉编译器，将变量变为一个结构体。使用 clang 展开，会生成如下结构体：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// __block 为变量 c 创建的结构体，其中成员 c 为 c 的值，forwarding 为指向自己的指针")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("__Block_byref_c_0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("__isa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  __Block_byref_c_0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("__forwarding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" __flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" __size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("而源码中的"),s("code",[t._v("__block int c = 3")]),t._v("则变成了：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__attribute__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__blocks__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("byref"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" __Block_byref_c_0 c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__Block_byref_c_0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__Block_byref_c_0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("而对于 block 实例而言，它的结构里包含了指向到 __Block_byref_c_0 的指针。")]),t._v(" "),s("h2",{attrs:{id:"如何实现一个-cancelable-的-block"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何实现一个-cancelable-的-block"}},[t._v("#")]),t._v(" 如何实现一个 cancelable 的 block")]),t._v(" "),s("p",[t._v("这个太简单了。")]),t._v(" "),s("p",[t._v("类似问题：如何实现一个只执行一次的 block？")]),t._v(" "),s("h1",{attrs:{id:"kvo-kvc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kvo-kvc"}},[t._v("#")]),t._v(" KVO & KVC")]),t._v(" "),s("h2",{attrs:{id:"apple-用什么方式实现对一个对象的-kvo？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#apple-用什么方式实现对一个对象的-kvo？"}},[t._v("#")]),t._v(" apple 用什么方式实现对一个对象的 KVO？")]),t._v(" "),s("p",[t._v("isa swizzle 或曰 class swizzle")]),t._v(" "),s("h2",{attrs:{id:"触发-kvo-相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#触发-kvo-相关"}},[t._v("#")]),t._v(" 触发 KVO 相关")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("automaticallyNotifiesObserversForKey:")])]),t._v(" "),s("li",[s("code",[t._v("willChangeValueForKey:")])]),t._v(" "),s("li",[s("code",[t._v("didChangevlueForKey:")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);