(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{151:function(e,r,t){"use strict";t.r(r);var n=t(0),o=Object(n.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#数组"}},[e._v("数组")]),t("ul",[t("li",[t("a",{attrs:{href:"#旋转数组"}},[e._v("旋转数组")])]),t("li",[t("a",{attrs:{href:"#元素处理"}},[e._v("元素处理")])]),t("li",[t("a",{attrs:{href:"#合并与拆分"}},[e._v("合并与拆分")])]),t("li",[t("a",{attrs:{href:"#一维-dp-问题"}},[e._v("一维 DP 问题")])]),t("li",[t("a",{attrs:{href:"#二维-dp-问题"}},[e._v("二维 DP 问题")])]),t("li",[t("a",{attrs:{href:"#数组和树"}},[e._v("数组和树")])]),t("li",[t("a",{attrs:{href:"#组合"}},[e._v("组合")])]),t("li",[t("a",{attrs:{href:"#特简单"}},[e._v("特简单")])]),t("li",[t("a",{attrs:{href:"#有些难"}},[e._v("有些难")])]),t("li",[t("a",{attrs:{href:"#其他数组题"}},[e._v("其他数组题")])])])]),t("li",[t("a",{attrs:{href:"#字符串"}},[e._v("字符串")])]),t("li",[t("a",{attrs:{href:"#链表"}},[e._v("链表")])]),t("li",[t("a",{attrs:{href:"#二叉树"}},[e._v("二叉树")])]),t("li",[t("a",{attrs:{href:"#其他"}},[e._v("其他")])])])]),t("p"),e._v(" "),t("p",[e._v("本文罗列的题目基本上摘自于 LeetCode，有如下特点：")]),e._v(" "),t("ul",[t("li",[e._v("特别容易描述，基本上一两句话就能讲清楚")])]),e._v(" "),t("h1",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[e._v("#")]),e._v(" 数组")]),e._v(" "),t("h2",{attrs:{id:"旋转数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#旋转数组"}},[e._v("#")]),e._v(" 旋转数组")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/rotate-array",target:"_blank",rel:"noopener noreferrer"}},[e._v("旋转数组"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("已实现，用了一个临时数组。")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[e._v("寻找旋转排序数组中的最小值"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("寻找旋转排序数组中的最小值 II"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[e._v("搜索旋转排序数组"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("搜索旋转排序数组 II"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"元素处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元素处理"}},[e._v("#")]),e._v(" 元素处理")]),e._v(" "),t("p",[e._v("如下罗列的题目特别简单，无需刷题，任何时候都应该能搞定：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-element/",target:"_blank",rel:"noopener noreferrer"}},[e._v("移除元素"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("简单")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[e._v("删除排序数组中的重复项"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("和上面题目一样，非常简单")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("删除排序数组中的重复项 II"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("增加了限制条件（允许每个元素最多可以有两个），但仍然还是非常简单")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[e._v("在排序数组中查找元素的第一个和最后一个位置"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/search-insert-position/",target:"_blank",rel:"noopener noreferrer"}},[e._v("搜索插入位置"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("二分")])])])]),e._v(" "),t("p",[e._v("我认为不太好的题目：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/contains-duplicate/",target:"_blank",rel:"noopener noreferrer"}},[e._v("存在重复元素"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("没啥套路，就是干，得使用 hash\n"),t("ul",[t("li",[e._v("先排序，再处理：时间换空间")]),e._v(" "),t("li",[e._v("使用哈希：空间换时间")])])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/contains-duplicate-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("寻找旋转排序数组中的最小值 II"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("没啥套路，就是干，得使用 map")])])])]),e._v(" "),t("p",[e._v("稍微没那么直观的题目：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/majority-element/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Majority Element"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("一道好题")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/missing-number/",target:"_blank",rel:"noopener noreferrer"}},[e._v("缺失数字"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/find-the-duplicate-number/",target:"_blank",rel:"noopener noreferrer"}},[e._v("寻找重复数"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/first-missing-positive/",target:"_blank",rel:"noopener noreferrer"}},[e._v("缺失的第一个正数"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/",target:"_blank",rel:"noopener noreferrer"}},[e._v("找到所有数组中消失的数字"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/find-all-duplicates-in-an-array/",target:"_blank",rel:"noopener noreferrer"}},[e._v("数组中重复的数据"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("和"),t("a",{attrs:{href:"https://leetcode-cn.com/problems/contains-duplicate/",target:"_blank",rel:"noopener noreferrer"}},[e._v("存在重复元素"),t("OutboundLink")],1),e._v("相比，增加了限制，但也更有意思了")])])])]),e._v(" "),t("h2",{attrs:{id:"合并与拆分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合并与拆分"}},[e._v("#")]),e._v(" 合并与拆分")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[e._v("合并两个有序数组"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/squares-of-a-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[e._v("有序数组的平方"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/sort-array-by-parity/",target:"_blank",rel:"noopener noreferrer"}},[e._v("按奇偶排序数组"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/sort-array-by-parity-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("按奇偶排序数组 II"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/partition-array-into-disjoint-intervals/",target:"_blank",rel:"noopener noreferrer"}},[e._v("分割数组"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"一维-dp-问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一维-dp-问题"}},[e._v("#")]),e._v(" 一维 DP 问题")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-subarray/",target:"_blank",rel:"noopener noreferrer"}},[e._v("最大子序和"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-product-subarray/",target:"_blank",rel:"noopener noreferrer"}},[e._v("乘积最大子序列"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/",target:"_blank",rel:"noopener noreferrer"}},[e._v("两数之和 II"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("是"),t("a",{attrs:{href:"https://leetcode-cn.com/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("两数之和"),t("OutboundLink")],1),e._v("的延伸，有了限制条件：有序，升级为一维 DP 问题")])])])]),e._v(" "),t("h2",{attrs:{id:"二维-dp-问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二维-dp-问题"}},[e._v("#")]),e._v(" 二维 DP 问题")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-length-of-repeated-subarray/",target:"_blank",rel:"noopener noreferrer"}},[e._v("最长重复子数组"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-size-subarray-sum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("长度最小的子数组"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"数组和树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组和树"}},[e._v("#")]),e._v(" 数组和树")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("从前序与中序遍历序列构造二叉树"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("从中序与后序遍历序列构造二叉树"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"组合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合"}},[e._v("#")]),e._v(" 组合")]),e._v(" "),t("p",[e._v("这类题代码比较长，挺烦。")]),e._v(" "),t("h2",{attrs:{id:"特简单"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特简单"}},[e._v("#")]),e._v(" 特简单")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/add-two-numbers/",target:"_blank",rel:"noopener noreferrer"}},[e._v("两数相加"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"有些难"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有些难"}},[e._v("#")]),e._v(" 有些难")]),e._v(" "),t("p",[e._v("如下罗列的题目有些难：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/median-of-two-sorted-arrays/",target:"_blank",rel:"noopener noreferrer"}},[e._v("寻找两个有序数组的中位数"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/majority-element/",target:"_blank",rel:"noopener noreferrer"}},[e._v("求众数"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/majority-element-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("求众数 II"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("有些难，不会也罢")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/subsets/description/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Subsets"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("比较容易就能描述，略有难度")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-consecutive-sequence/",target:"_blank",rel:"noopener noreferrer"}},[e._v("最长连续序列"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("比较难")])])])]),e._v(" "),t("h2",{attrs:{id:"其他数组题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他数组题"}},[e._v("#")]),e._v(" 其他数组题")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("两数之和"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("存在若干种解决办法：\n"),t("ul",[t("li",[e._v("冒泡：时间换空间")]),e._v(" "),t("li",[e._v("使用 map：空间换时间")])])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/plus-one/",target:"_blank",rel:"noopener noreferrer"}},[e._v("加一"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/max-consecutive-ones/",target:"_blank",rel:"noopener noreferrer"}},[e._v("最大连续1的个数"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"}},[e._v("最长连续递增序列"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/move-zeroes/",target:"_blank",rel:"noopener noreferrer"}},[e._v("移动零"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("可能没想象中那么容易")])])])]),e._v(" "),t("h1",{attrs:{id:"字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[e._v("#")]),e._v(" 字符串")]),e._v(" "),t("p",[e._v("字符串相关题目。")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/tag/string/",target:"_blank",rel:"noopener noreferrer"}},[e._v("LeetCode: String"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("字符串问题优先使用C解题，如果需要用到Dictionary之类的高阶东西，就用Swift实现吧")]),e._v(" "),t("li",[e._v("关于字符串还有大量的与动态规划相关的算法题，本文就不罗列了，比较费时，估计不会出现在面试中")])]),e._v(" "),t("p",[e._v("本文罗列常见的字符串相关算法题，题目特点是比较容易表达，这些题我感觉都比较容易考：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"}},[e._v("无重复字符的最长子串"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("有点难度，不过被我搞定了")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-common-prefix/description/",target:"_blank",rel:"noopener noreferrer"}},[e._v("最长公共前缀"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("还好，不是很难，两个循环语句")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/valid-parentheses/",target:"_blank",rel:"noopener noreferrer"}},[e._v("有效的括号"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("括号的合法性检验")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-valid-parentheses/",target:"_blank",rel:"noopener noreferrer"}},[e._v("最长有效括号"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("有点难，没搞出来，不会也罢，hard 级别")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-string/",target:"_blank",rel:"noopener noreferrer"}},[e._v("反转字符串"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("非常简单")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-words-in-a-string/",target:"_blank",rel:"noopener noreferrer"}},[e._v("反转一句话"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("有蛮多细节要处理")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/compare-version-numbers/",target:"_blank",rel:"noopener noreferrer"}},[e._v("比较版本号"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/validate-ip-address/",target:"_blank",rel:"noopener noreferrer"}},[e._v("验证IP"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/restore-ip-addresses/",target:"_blank",rel:"noopener noreferrer"}},[e._v("复原IP地址"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("要复原所有可能的 IP，有些难，回溯法，我似乎要补充一些回溯相关的知识点")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/number-of-segments-in-a-string/",target:"_blank",rel:"noopener noreferrer"}},[e._v("字符串中的单词数"),t("OutboundLink")],1)])]),e._v(" "),t("h1",{attrs:{id:"链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[e._v("#")]),e._v(" 链表")]),e._v(" "),t("p",[e._v("从结构上看，链表的类型包括：")]),e._v(" "),t("ul",[t("li",[e._v("单向链表：应用场合包括栈、队列、树、哈希表、跳跃表、图论等")]),e._v(" "),t("li",[e._v("双向链表：很少用到，斐波那契堆有用到")]),e._v(" "),t("li",[e._v("环形链表")]),e._v(" "),t("li",[e._v("非环形链表")])]),e._v(" "),t("p",[e._v("定义链表节点：")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ListNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("val")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" val\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("next "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("链表相关的算法题，几乎没有难题。")]),e._v(" "),t("p",[e._v("需要提醒的是，要习惯性在末尾对 tail 链表进行"),t("code",[e._v("tail.next = null")]),e._v(" 处理。")]),e._v(" "),t("p",[e._v("另外，可能经常需要建立 fakeHead。")]),e._v(" "),t("p",[e._v("详见"),t("a",{attrs:{href:"https://leetcode-cn.com/tag/linked-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("LeetCode: Linked List"),t("OutboundLink")],1),e._v("，包括：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("反转链表"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-linked-list-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("反转链表 II"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("反转部分链表，不难，但是细节太多")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[e._v("合并两个有序链表"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("删除链表的倒数第N个节点"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("直观的解决办法很容易想到，遍历两遍：第一遍获取链表的长度，第二遍删除节点")]),e._v(" "),t("li",[e._v("俏皮的一次遍历法：一个指针先走n-1步，另一个指针从头开始向后走，当先走的那个走不下去的时候，另一个指针的位置就是待删除结点")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/rotate-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("旋转链表"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("和翻转链表不一样哦")]),e._v(" "),t("li",[e._v("细节挺多的，没那么容易，还是老老实实遍历两遍吧")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("删除排序链表中的重复元素"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("删除多余，只保留一个")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("删除排序链表中的重复元素 II"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("删除出现重复的节点（一个都不保留），细节更多")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/partition-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("分隔链表"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("挺简单的")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-linked-list-elements/",target:"_blank",rel:"noopener noreferrer"}},[e._v("移除链表元素"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/delete-node-in-a-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("删除链表中的节点"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("这道题有些怪")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/odd-even-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("奇偶链表"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("也非常简单")]),e._v(" "),t("li",[e._v("我想到的是给每一个节点标记它所在的层次，这样需要遍历这棵树两遍")])])])]),e._v(" "),t("p",[e._v("环形链表和交叉链表问题也常考：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"}},[e._v("环形链表"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("判断链表是否有环：快慢指针法，还是比较容易的")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("环形链表 II"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("找出链表入环的节点：有点难，但分析的文章有很多，以后再说吧")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/",target:"_blank",rel:"noopener noreferrer"}},[e._v("相交链表"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("判断两个链表是否相交：太容易了，如果链表相交，它们的最后一个节点肯定一样")]),e._v(" "),t("li",[e._v("找出相交点：也容易")]),e._v(" "),t("li",[e._v("延伸到现实问题：找两个 view 的最近父 view")])])])]),e._v(" "),t("h1",{attrs:{id:"二叉树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[e._v("#")]),e._v(" 二叉树")]),e._v(" "),t("ul",[t("li",[e._v("二叉树（Binary Tree）的性质\n"),t("ul",[t("li",[e._v("是否平衡")]),e._v(" "),t("li",[e._v("最大深度")]),e._v(" "),t("li",[e._v("最小深度")]),e._v(" "),t("li",[e._v("两棵树是否完全相同")]),e._v(" "),t("li",[e._v("完全二叉树")]),e._v(" "),t("li",[e._v("是否是镜像树")])])]),e._v(" "),t("li",[e._v("二叉搜索树（Binary Search Tree）的性质\n"),t("ul",[t("li",[e._v("判断一棵树是否是二叉搜索树")]),e._v(" "),t("li",[e._v("n个不同值的结点能够构建多少种二叉搜索树")])])]),e._v(" "),t("li",[e._v("二叉树遍历问题\n"),t("ul",[t("li",[e._v("先序遍历")]),e._v(" "),t("li",[e._v("中序遍历")]),e._v(" "),t("li",[e._v("后序遍历")]),e._v(" "),t("li",[e._v("层序遍历")])])])]),e._v(" "),t("p",[e._v("定义二叉树节点：")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("TreeNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("val")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("val "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" val\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("right "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("前序遍历"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("递归容易，迭代稍麻烦")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("中序遍历"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("递归容易，迭代较麻烦")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("后续遍历"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("递归容易，迭代很麻烦")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("层次遍历"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("微软经典题，还没解决")])])])]),e._v(" "),t("p",[e._v("二叉树问题一般都可以递归解决：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("验证二叉搜索树"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/same-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("相同的树"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("二叉树的最大深度"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/balanced-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("平衡二叉树"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("一棵高度平衡二叉树定义为：一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1")])])])]),e._v(" "),t("h1",{attrs:{id:"其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[e._v("#")]),e._v(" 其他")]),e._v(" "),t("p",[e._v("如下算法题，取自《编程之美》：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/number-of-1-bits/description/",target:"_blank",rel:"noopener noreferrer"}},[e._v("求二进制中1的个数"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("太简单了")])])]),e._v(" "),t("li",[e._v("最大公约数问题\n"),t("ul",[t("li",[e._v("如果不知道套路，很难临场发挥")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/description/",target:"_blank",rel:"noopener noreferrer"}},[e._v("寻找第K大的数"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("与快排有关，了解快排后才能搞定，专门写过一篇博客")]),e._v(" "),t("li",[e._v("相关题目：寻找最大的K个数，套路是一样的")])])]),e._v(" "),t("li",[e._v("寻找数组中的最大值和最小值\n"),t("ul",[t("li",[e._v("有更高阶的做法，略麻烦，可忽略")])])]),e._v(" "),t("li",[e._v("求二叉树中节点的最大距离")])])])}),[],!1,null,null,null);r.default=o.exports}}]);