(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{164:function(t,e,o){"use strict";o.r(e);var a=o(0),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("p",[t._v("吾尝以为"),o("code",[t._v("NSObject")]),t._v("是 Apple 的所有 Objective-C 引用类型的老祖宗，直到后来知道了"),o("code",[t._v("NSProxy")]),t._v("的存在...")]),t._v(" "),o("p",[o("code",[t._v("NSProxy")]),t._v("和"),o("code",[t._v("class NSObject")]),t._v("平级，彼此没有继承关系；唯一的相同点是它们都遵循"),o("code",[t._v("protocol NSObject")]),t._v("。尚未在开发中使用过"),o("code",[t._v("NSProxy")]),t._v("，最近琢磨需求开发的方案时注意到了这个类的存在，有不少疑问，譬如"),o("code",[t._v("NSproxy")]),t._v("存在的意义是什么？如何使用它呢？本文将疑惑记录下来，并尝试自我解惑。")]),t._v(" "),o("h3",{attrs:{id:"nsproxy-简介"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#nsproxy-简介"}},[t._v("#")]),t._v(" NSProxy 简介")]),t._v(" "),o("p",[o("code",[t._v("NSProxy")]),t._v("是一个抽象类，它实现了"),o("code",[t._v("protocol NSObject")]),t._v("所要求的基本方法，譬如内省相关的"),o("code",[t._v("-isKindOfClass:")]),t._v("、派发消息相关的 performSelector 系列方法等；但是不能直接使用它创建对象。")]),t._v(" "),o("p",[t._v("子类化"),o("code",[t._v("NSProxy")]),t._v("的要求也很简单，实现"),o("code",[t._v("-forwardInvocation:")]),t._v("和"),o("code",[t._v("-methodSignatureForSelector:")]),t._v("这两个方法即可；显然，这两个方法与消息转发相关，实现这两个方法的典型姿势是：")]),t._v(" "),o("div",{staticClass:"language-objectivec extra-class"},[o("pre",{pre:!0,attrs:{class:"language-objectivec"}},[o("code",[o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("forwardInvocation"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSInvocation "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("anInvocation "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("anInvocation invokeWithTarget"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("_realObject"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// _realObject是自定义的实例变量")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n– "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSMethodSignature "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("methodSignatureForSelector"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SEL"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("aSelector "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_realObject methodSignatureForSelector"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("aSelector"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),o("p",[o("code",[t._v("NSProxy")]),t._v("存在的意义是为它人做嫁衣，Apple 的"),o("a",{attrs:{href:"https://developer.apple.com/documentation/foundation/nsproxy",target:"_blank",rel:"noopener noreferrer"}},[t._v("说法"),o("OutboundLink")],1),t._v("是：")]),t._v(" "),o("blockquote",[o("p",[t._v("Typically, a message to a proxy is forwarded to the real object or causes the proxy to load (or transform itself into) the real object.")])]),t._v(" "),o("h3",{attrs:{id:"nsproxy-的消息转发机制"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#nsproxy-的消息转发机制"}},[t._v("#")]),t._v(" NSProxy 的消息转发机制")]),t._v(" "),o("p",[t._v("虽然"),o("code",[t._v("NSProxy")]),t._v("和"),o("code",[t._v("class NSObject")]),t._v("都定义了"),o("code",[t._v("-forwardInvocation:")]),t._v("和"),o("code",[t._v("-methodSignatureForSelector:")]),t._v("，但这两个方法并没有在"),o("code",[t._v("protocol NSObject")]),t._v("中声明；两者对这俩方法的调用逻辑更是完全不同。")]),t._v(" "),o("p",[t._v("对于"),o("code",[t._v("class NSObject")]),t._v("而言，接收到消息后先去自身的方法列表里找匹配的 selector，如果找不到，会沿着继承体系去 superclass 的方法列表找；如果还找不到，先后会经过"),o("code",[t._v("+resolveInstanceMethod:")]),t._v("和"),o("code",[t._v("-forwardingTargetForSelector:")]),t._v("处理，处理失败后，才会到"),o("code",[t._v("-methodSignatureForSelector:")]),t._v("/"),o("code",[t._v("-forwardInvocation:")]),t._v("进行最后的挣扎。更详细的叙述，详见"),o("router-link",{attrs:{to:"/post/message-forwarding/"}},[t._v("NSObject 的消息转发机制")]),t._v("。")],1),t._v(" "),o("p",[t._v("但对于"),o("code",[t._v("NSProxy")]),t._v("，接收 unknown selector 后，直接回调"),o("code",[t._v("-methodSignatureForSelector:")]),t._v("/"),o("code",[t._v("-forwardInvocation:")]),t._v("，消息转发过程比"),o("code",[t._v("class NSObject")]),t._v("要简单得多。")]),t._v(" "),o("p",[t._v("相对于"),o("code",[t._v("class NSObject")]),t._v("，"),o("code",[t._v("NSProxy")]),t._v("的另外一个非常重要的不同点也值得注意："),o("code",[t._v("NSProxy")]),t._v("会将自省相关的 selector 直接 forward 到"),o("code",[t._v("-forwardInvocation:")]),t._v("回调中，这些自省方法包括：")]),t._v(" "),o("div",{staticClass:"language-objectivec extra-class"},[o("pre",{pre:!0,attrs:{class:"language-objectivec"}},[o("code",[o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("isKindOfClass"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Class"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("aClass"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("isMemberOfClass"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Class"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("aClass"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("conformsToProtocol"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Protocol "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("aProtocol"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("respondsToSelector"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SEL"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("aSelector"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),o("p",[t._v("简单来说，这 4 个 selector 的实际接收者 realObject，而不是"),o("code",[t._v("NSProxy")]),t._v("对象本身。但另一方面，"),o("code",[t._v("NSProxy")]),t._v("并没有将 performSelector 系列 selector 也 forward 到"),o("code",[t._v("-forwardInvocation:")]),t._v("，换句话说，"),o("code",[t._v("[proxy performSelector:someSelector]")]),t._v("的真正处理者仍然是 proxy 自身，只是后续会将 someSelector 给 forward 到"),o("code",[t._v("-forwardInvocation:")]),t._v("回调，然后经由 realObject 处理。")]),t._v(" "),o("p",[t._v("P.S: 如上这个说法我并没有找到比较权威的官方直接说明，只是写 demo 验证了自己的判断。")]),t._v(" "),o("p",[t._v("P.P.S: "),o("code",[t._v("NSProxy")]),t._v("自省方法的默认实现是将消息 forward 到 realObject，如果不想这样，该怎么办？简单，override 相关方法即可。只不过 override 时不要 super invoke。")]),t._v(" "),o("h3",{attrs:{id:"init-和-isproxy"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#init-和-isproxy"}},[t._v("#")]),t._v(" -init 和-isProxy")]),t._v(" "),o("p",[t._v("除了上述的"),o("code",[t._v("-methodSignatureForSelector:")]),t._v("和"),o("code",[t._v("-forwardInvocation:")]),t._v("，"),o("code",[t._v("NSProxy")]),t._v("另外两个方法也非常值得说一说。")]),t._v(" "),o("p",[t._v("首先是"),o("code",[t._v("-init")]),t._v("。事实上，"),o("code",[t._v("NSProxy")]),t._v("没有定义这个方法，对于直接继承"),o("code",[t._v("NSProxy")]),t._v("的类，创建对象时不需要使用"),o("code",[t._v("[super init]")]),t._v("之类的调用进行初始化。为啥 Apple 不为"),o("code",[t._v("NSProxy")]),t._v("提供默认的构造器呢？我想这和它的定位有关吧，它是一个抽象类，不提供默认的"),o("code",[t._v("-init")]),t._v("反而能进一步阻止用户直接使用"),o("code",[t._v("NSProxy")]),t._v("创建对象。")]),t._v(" "),o("p",[t._v("P.S: 从"),o("code",[t._v("class NSObject")]),t._v("的"),o("a",{attrs:{href:"https://opensource.apple.com/source/objc4/objc4-723/runtime/NSObject.mm",target:"_blank",rel:"noopener noreferrer"}},[t._v("开源代码"),o("OutboundLink")],1),t._v("来看，"),o("code",[t._v("class NSObject")]),t._v("的"),o("code",[t._v("-init")]),t._v("其实也没干啥事儿。")]),t._v(" "),o("p",[t._v("另一个值得一提的方法是"),o("code",[t._v("-(BOOL)isProxy")]),t._v("，用户可以根据该方法的返回值判断对象是否继承自"),o("code",[t._v("NSObject")]),t._v("。")]),t._v(" "),o("p",[t._v("P.S: 看起来这个方法很重要，但尚未搞清楚它的内涵意义，以后再补充吧！")]),t._v(" "),o("h3",{attrs:{id:"使用-nsproxy-设计代理类"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#使用-nsproxy-设计代理类"}},[t._v("#")]),t._v(" 使用 NSProxy 设计代理类")]),t._v(" "),o("p",[t._v("使用"),o("code",[t._v("NSProxy")]),t._v("设计简单的代理类非常合适。老司机老谭在其博客"),o("a",{attrs:{href:"http://www.tanhao.me/code/160702.html/",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用 NSProxy 和 NSObject 设计代理类的差异"),o("OutboundLink")],1),t._v("中探讨过使用"),o("code",[t._v("NSProxy")]),t._v("设计代理类的优势，简单罗列如下：")]),t._v(" "),o("ul",[o("li",[o("code",[t._v("NSProxy")]),t._v("会将自省相关方法直接 forward 到"),o("code",[t._v("forwardInvocation:")]),t._v("回调，如果基于"),o("code",[t._v("class NSObject")]),t._v("实现类似的效果，得另外写不少代码，比较麻烦。")]),t._v(" "),o("li",[o("code",[t._v("NSProxy")]),t._v("比"),o("code",[t._v("class NSObject")]),t._v("干净得多，后者各种 category（譬如"),o("code",[t._v("NSObject(NSKeyValueCoding)")]),t._v("）定义了诸多方法，这些方法的存在使得消息转发变得更麻烦，因为得区分"),o("code",[t._v("class NSObject")]),t._v("对象本身和其所指向的 realObject。")])]),t._v(" "),o("p",[t._v("或许是我看到的东西太少，"),o("code",[t._v("NSProxy")]),t._v("的使用场景并不多，只是用于设计一些简单的代理，譬如常见的应用场景是解决"),o("code",[t._v("NSTimer")]),t._v("与其 target 之间的循环引用问题（参考"),o("a",{attrs:{href:"http://blog.csdn.net/GGGHub/article/details/51374150",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),o("OutboundLink")],1),t._v("）。复杂的代理逻辑，譬如 ReactiveCocoa 的"),o("code",[t._v("RACDelegateProxy")]),t._v("，大多基于"),o("code",[t._v("NSObject")]),t._v("实现，因为"),o("code",[t._v("NSObject")]),t._v("要强大得多，譬如支持 KVO、runtime，而上述罗列的"),o("code",[t._v("class NSObject")]),t._v("的不足，只要基本功扎实，心思缜密，理论上是可以绕过的，只不过要写大量的 override 逻辑。另外，我认为另一个重要的原因是"),o("code",[t._v("class NSObject")]),t._v("的相关实现是开源的，逻辑比较可控。而"),o("code",[t._v("NSProxy")]),t._v("属于 NSFoundation 的一部分，并没有开源。")]),t._v(" "),o("p",[t._v("另外，著名的第三方库 libextobjc 基于"),o("code",[t._v("NSProxy")]),t._v("设计了一个非常有意思的类："),o("code",[t._v("EXTNil")]),t._v("。该类基本上实现了神奇的"),o("code",[t._v("nil")]),t._v("指针功能：可以接收任何消息而不抛出"),o("code",[t._v("doesNotRecognizeSelector:")]),t._v("异常，但不进行任何处理。之所以说「基本上」，是因为还不彻底，向"),o("code",[t._v("EXTNil")]),t._v("发送的有效消息必须在工程全局范围内能找到有效 selector，否则仍然会抛出"),o("code",[t._v("doesNotRecognizeSelector:")]),t._v("异常。")]),t._v(" "),o("p",[o("strong",[t._v("本文参考")])]),t._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"http://www.tanhao.me/code/160702.html/",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用 NSProxy 和 NSObject 设计代理类的差异"),o("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);