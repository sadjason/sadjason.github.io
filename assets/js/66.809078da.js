(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{135:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("本文罗列一下 GCD 基础知识。")]),t._v(" "),s("h2",{attrs:{id:"并行和并发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并行和并发"}},[t._v("#")]),t._v(" 并行和并发")]),t._v(" "),s("p",[t._v("在英文世界里，"),s("em",[t._v("并行")]),t._v(" 和 "),s("em",[t._v("并发")]),t._v(" 的区别比较清晰，"),s("em",[t._v("并行")]),t._v(" 对应 "),s("em",[t._v("parallelism")]),t._v("，"),s("em",[t._v("并发")]),t._v(" 对应 "),s("em",[t._v("concurrency")]),t._v("；但在中文世界里二者仅一字之差，两个概念非常容易弄混淆。")]),t._v(" "),s("p",[t._v("各种资料对 "),s("em",[t._v("并行")]),t._v(" 和 "),s("em",[t._v("并发")]),t._v(" 有各种各样的解释和比喻。我比较喜欢的一种，是播客节目"),s("a",{attrs:{href:"http://ipn.li/kernelpanic/13",target:"_blank",rel:"noopener noreferrer"}},[t._v("内核恐慌"),s("OutboundLink")],1),t._v("中的主播 Rio 的描述，大概意思是：")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("并发")]),t._v(" 和 "),s("em",[t._v("并行")]),t._v(" 是一种计算模型，使得计算机能够在同一时间处理多个任务；并发表示逻辑概念上的同时，并行表示物理概念上的同时。")])]),t._v(" "),s("p",[t._v("简单来说，若说两个任务 A 和 B 并发执行，则表示任务 A 和任务 B 在同一时间段里被执行（更多的可能是二者交替执行）；若说任务 A 和 B 并行执行，则表示任务 A 和任务 B 在同时被执行（这要求计算机有多个运算器）。")]),t._v(" "),s("p",[t._v("一句话：并行要求并发，但并发并不能保证并行。")]),t._v(" "),s("p",[t._v("P.S: 关于并发和并行，"),s("a",{attrs:{href:"https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Grand Central Dispatch In-Depth: Part 1/2"),s("OutboundLink")],1),t._v("中有更详细生动的图文解释。")]),t._v(" "),s("h2",{attrs:{id:"dispatch-queue-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dispatch-queue-介绍"}},[t._v("#")]),t._v(" Dispatch Queue 介绍")]),t._v(" "),s("p",[t._v("Dispatch Queue 是 GCD 处理异步任务和并发任务的关键载体，简而言之，在 GCD 中，将 task 放入某个 Dispatch Queue 中，然后等待系统去处理之。")]),t._v(" "),s("p",[t._v("Dispatch queue 是 object-like structure，也就是说 Dispatch queue 在 Objective-C 中不是类结构，而是类似于类结构。dispatch queue 对 task 的管理都遵循 FIFO。GCD 提供了一些公共的 dispatch queue，但是用户也可以自定义一些 dispatch queue；iOS 对 dispatch queue 做了归类，分为三类：")]),t._v(" "),s("ul",[s("li",[t._v("Serial Dispatch Queue")]),t._v(" "),s("li",[t._v("Concurrent Dispatch Queue")]),t._v(" "),s("li",[t._v("Main Dispatch Queue")])]),t._v(" "),s("h3",{attrs:{id:"serial-dispatch-queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#serial-dispatch-queue"}},[t._v("#")]),t._v(" Serial Dispatch Queue")]),t._v(" "),s("p",[t._v("顾名思义，serial dispatch queue 中的 block 按照先进先出（FIFO）的顺序去执行，实际上为单线程执行。即每次从 queue 中取出一个 task 进行处理；用户可以根据需要创建任意多的 serial dispatch queue，serial dispatch queue 彼此之间是并发的；")]),t._v(" "),s("p",[t._v("创建 serial dispatch queue 使用"),s("code",[t._v("dispatch_queue_create")]),t._v("方法，指定其第二个参数为"),s("code",[t._v("DISPATCH_QUEUE_SERIAL")]),t._v("（即"),s("code",[t._v("NULL")]),t._v("）即可：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[t._v("dispatch_queue_t queue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_queue_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.example.MySerialQueue"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DISPATCH_QUEUE_SERIAL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("注意：如果不算“Main Dispatch Queue”，系统中不存在所谓的 global serial dispatch queue。")]),t._v(" "),s("p",[t._v("P.S: main dispatch queue 其实也算 serial dispatch queue，后文有述。")]),t._v(" "),s("h3",{attrs:{id:"concurrent-dispatch-queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrent-dispatch-queue"}},[t._v("#")]),t._v(" Concurrent Dispatch Queue")]),t._v(" "),s("p",[t._v("相对于 Serial Dispatch Queue，Concurrent Dispatch Queue 一次性并发执行一个或者多个 task；和 Serial Dispatch Queue 不同，系统提供了四个 global concurrent queue，使用"),s("code",[t._v("dispatch_get_global_queue")]),t._v("函数就可以获取这些 global concurrent queue。")]),t._v(" "),s("p",[t._v("和 Serial Dispatch Queue 一样，用户也可以根据需要自己定义 concurrent queue；创建 concurrent dispatch queue 也使用"),s("code",[t._v("dispatch_queue_create")]),t._v("方法，所不同的是需要指定其第二个参数为"),s("code",[t._v("DISPATCH_QUEUE_CONCURRENT")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[t._v("dispatch_queue_t queue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_queue_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.example.MyConcurrentQueue"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DISPATCH_QUEUE_CONCURRENT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("P.S: 根据我的理解，对于 concurrent queue，类似于其他语言里的线程池，其管理的 task 可能在多个不同 thread 上执行，至于 dispatch queue 管理多少个 thread 是未知的，这要视系统资源而定，用户无需为此烦扰。")]),t._v(" "),s("h3",{attrs:{id:"main-dispatch-queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#main-dispatch-queue"}},[t._v("#")]),t._v(" Main Dispatch Queue")]),t._v(" "),s("p",[t._v("关于 Main Dispatch Queue，《Concurrency Programming Guide》（Apple 官方文档）的描述如下：")]),t._v(" "),s("blockquote",[s("p",[t._v("The main dispatch queue is a globally available serial queue that executes tasks on the application’s main thread.")])]),t._v(" "),s("p",[t._v("根据我的理解，application 的主要任务（譬如 UI 管理之类的）都在 main dispatch queue 中完成；根据文档的描述，main dispatch queue 中的 task 都在一个 thread 中运行，即 application’s main thread（thread 1）。")]),t._v(" "),s("p",[t._v("所以，如果想要更新 UI，则必须在 main dispatch queue 中处理，获取 main dispatch queue 也很容易，调用"),s("code",[t._v("dispatch_get_main_queue()")]),t._v("函数即可。")]),t._v(" "),s("h3",{attrs:{id:"关于-dispatch-queues-的一些误解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于-dispatch-queues-的一些误解"}},[t._v("#")]),t._v(" 关于 Dispatch Queues 的一些误解")]),t._v(" "),s("p",[t._v("在学习 GCD 过程中，我一路上有许多关于 dispatch 的错误理解，如下是总结：")]),t._v(" "),s("ul",[s("li",[t._v("不存在所谓的 "),s("em",[t._v("同步队列")]),t._v(" 和 "),s("em",[t._v("异步队列")])])]),t._v(" "),s("p",[t._v("同步或异步描述的是 task 与其上下文之间的关系，所以，我觉得 "),s("em",[t._v("同步队列")]),t._v(" 和 "),s("em",[t._v("异步队列")]),t._v(" 对于 Objective-C 的 GCD 而言是不靠谱的概念。")]),t._v(" "),s("p",[t._v("P.S: 补充！虽然没有 "),s("em",[t._v("同步队列")]),t._v(" 和 "),s("em",[t._v("异步队列")]),t._v(" 的说法，但是有 "),s("em",[t._v("同步串行队列")]),t._v(" 和 "),s("em",[t._v("同步并发队列")]),t._v(" 的概念。")]),t._v(" "),s("ul",[s("li",[t._v("Serial Dispatch Queue 上的 tasks 并非只在同一个 thread 上执行")])]),t._v(" "),s("p",[t._v("吾尝以为 serial queue 上的 tasks 都是在同一个 thread 上运行，后来明白了不是这样的，对于那些同步请求的任务，譬如使用 dispatch_sync 函数添加到 serial dispatch queue 中的任务，其运行的 task 往往与所在的上下文是同一个 thread；对于那些异步请求的任务，譬如使用 dispatch_async 函数添加到 serial dispatch queue 中的任务，其运行的 task 往往是另一个的 thread。举例说明：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("viewDidLoad "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" viewDidLoad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    dispatch_queue_t aSerialQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_queue_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"haha"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DISPATCH_QUEUE_SERIAL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aSerialQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// block 1")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"current 1: %@"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSThread currentThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_async")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aSerialQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// block 2")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"current 2: %@"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSThread currentThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行结果：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// current 1: <NSThread: 0x7f8f397152f0>{number = 1, name = main}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// current 2: <NSThread: 0x7f8f39464db0>{number = 2, name = (null)}")]),t._v("\n")])])]),s("p",[t._v("block 1 和 block 2 都由同一个 serial dispatch queue 管理，但它们的执行线程显然不同，前者的执行线程是 thread 1，后者的执行线程是 thread 2。")]),t._v(" "),s("ul",[s("li",[t._v("dispatch queue 和 thread 并不存在一对一或者一对多的关系")])]),t._v(" "),s("p",[t._v("通过设置断点等测试手段可以知道可能多个 dispatch queue 共用一个 thread，也可能一个 dispatch queue 中的 tasks 在多个不同 threads 上执行。")]),t._v(" "),s("p",[t._v("总之，根据我的理解，thread 和 dispatch queue 之间没有从属关系。")]),t._v(" "),s("h2",{attrs:{id:"dispatch-sync-和-dispatch-async"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dispatch-sync-和-dispatch-async"}},[t._v("#")]),t._v(" dispatch_sync 和 dispatch_async")]),t._v(" "),s("p",[t._v("在 GCD 中，"),s("code",[t._v("dispatch_sync")]),t._v("和"),s("code",[t._v("dispatch_async")]),t._v("是两个函数，前者用于派发同步任务，后者用于派发异步任务，二者使用格式如下：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dispatch task synchronously")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someQueue1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something 2")]),t._v("\n")])])]),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dispatch task asynchronously")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_async")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someQueue2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something 3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something 4")]),t._v("\n")])])]),s("p",[s("code",[t._v("do something 2")]),t._v("一定会在"),s("code",[t._v("do something 1")]),t._v("完成之后执行，即所谓的"),s("strong",[t._v("同步")]),t._v("。当执行到"),s("code",[t._v("dispatch_sync(...)")]),t._v("时，其上下文被阻塞，直到"),s("code",[t._v("dispatch_sync")]),t._v("派发的 block 被执行完毕。")]),t._v(" "),s("p",[t._v("根据我的理解："),s("strong",[t._v("dispatch_sync 派发的 block 的执行线程和 dispatch_sync 上下文线程是同一个线程")]),t._v("。")]),t._v(" "),s("p",[t._v("P.S: 这个说法还没有找到权威的、直接明了的佐证。")]),t._v(" "),s("p",[t._v("而"),s("code",[t._v("do something 4")]),t._v("会立即执行，而不会等到"),s("code",[t._v("do something 3")]),t._v("执行完，即所谓"),s("strong",[t._v("异步")]),t._v("。当执行到"),s("code",[t._v("dispatch_async(...)")]),t._v("时，其上下文不被阻塞，继续运行。")]),t._v(" "),s("p",[t._v("根据我的理解："),s("code",[t._v("do something 3")]),t._v("和"),s("code",[t._v("do something 4")]),t._v("的执行线程往往不是同一个，即"),s("strong",[t._v("dispatch_async 派发的 block 的执行线程和 dispatch_async 上下文线程不是同一个线程")]),t._v("。")]),t._v(" "),s("p",[t._v("来看一个示例，如下有一段代码：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. create a serial dispatch queue")]),t._v("\ndispatch_queue_t serial_queue"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_queue_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.zhangbuhuai.test"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DISPATCH_QUEUE_SERIAL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Thread 1")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. add tasks to serial dispatch queue")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1) add a task synchronously")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("serial_queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 休眠3秒")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"task 1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Thread 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2) add a task synchronously too")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("serial_queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"task 2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Thread 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3) add a task asynchronously")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_async")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("serial_queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"task 3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Thread x  (x != 1)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4) add a task asynchronously too")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_async")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("serial_queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"task 4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Thread x  (x != 1)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"test end"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Thread 1")]),t._v("\n")])])]),s("p",[t._v("假设创建"),s("code",[t._v("serial_queue")]),t._v("所在的上下文的执行线程为 Thread 1，则测试结果是："),s("code",[t._v('NSLog(@"task 1")')]),t._v("和"),s("code",[t._v('NSLog(@"task 2")')]),t._v("也都在 Thread 1 中执行，而"),s("code",[t._v('NSLog(@"task 3")')]),t._v("和"),s("code",[t._v('NSLog(@"task 4")')]),t._v("在别的 Thread 中执行。")]),t._v(" "),s("p",[t._v("执行结果：")]),t._v(" "),s("div",{staticClass:"language-textile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-textile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token phrase"}},[t._v("task 1\ntask 2\ntest end\ntask 3\ntask 4\n")])])])]),s("p",[t._v("结果说明，对于 serial dispatch queue 中的 tasks，无论是同步派发还是异步派发，其执行顺序都遵循 FIFO；同样，这个示例也可以直观阐述"),s("code",[t._v("dispatch_sync")]),t._v("和"),s("code",[t._v("dispatch_async")]),t._v("的不同效果。")]),t._v(" "),s("p",[s("strong",[t._v("dispatch_sync 和 dispatch_async 的使用时机")])]),t._v(" "),s("p",[t._v("在大多数时候，"),s("code",[t._v("dispatch_sync")]),t._v("和"),s("code",[t._v("dispatch_async")]),t._v("的使用时机非常清晰的：")]),t._v(" "),s("ul",[s("li",[t._v("如果派发的 task 耗时长，不想让上下文线程被阻塞，就用"),s("code",[t._v("dispatch_async")])]),t._v(" "),s("li",[t._v("如果要处理的代码比较短，想要实现代码保护（线程安全），选用"),s("code",[t._v("dispatch_sync")])])]),t._v(" "),s("p",[t._v("P.S: 关于"),s("code",[t._v("dispatch_sync")]),t._v("与线程同步（代码保护）之间的关系，"),s("s",[t._v("以后补充")]),t._v("。")]),t._v(" "),s("p",[t._v("但有些时候，使用"),s("code",[t._v("dispatch_sync")]),t._v("或者"),s("code",[t._v("dispatch_async")]),t._v("都可以的情况下（譬如实现 setter），就不是那么好选择了。")]),t._v(" "),s("p",[t._v("在《Effective Objective-C 2.0》Item 41（中文版 P169）中看到非常重要的一句话：")]),t._v(" "),s("blockquote",[s("p",[t._v("...，因为在执行异步派发时，需要拷贝块。")])]),t._v(" "),s("p",[t._v("我对这句话的理解是：")]),t._v(" "),s("ul",[s("li",[t._v("执行同步派发（"),s("code",[t._v("dispatch_sync")]),t._v("）时，是不需要拷贝 block 的，这是因为"),s("code",[t._v("dispatch_sync")]),t._v("中所派发的 task 往往和当前上下文所处同一个 Thread")]),t._v(" "),s("li",[t._v("执行异步派发（"),s("code",[t._v("dispatch_async")]),t._v("）时，需要拷贝 block，这是因为"),s("code",[t._v("dispatch_async")]),t._v("中所派发的 task 往往和当前上下文不同于一个 Thread")])]),t._v(" "),s("p",[t._v("所以，当选择"),s("code",[t._v("dispatch_sync")]),t._v("或者"),s("code",[t._v("dispatch_async")]),t._v("都可以的情况下，站在效率的角度，如果拷贝 block 的时间成本过高，则使用"),s("code",[t._v("dispatch_sync")]),t._v("；如果拷贝 block 的时间成本远低于执行 block 的时间成本，则使用"),s("code",[t._v("dispatch_async")]),t._v("。")]),t._v(" "),s("p",[t._v("如上所引用的「...，因为在执行异步派发时，需要拷贝块」这句话，在某种程度上佐证了上文提到的两个说法：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("dispatch_sync")]),t._v("派发的 block 的执行线程和"),s("code",[t._v("dispatch_sync")]),t._v("上下文线程是同一个线程；")]),t._v(" "),s("li",[s("code",[t._v("dispatch_async")]),t._v("派发的 block 的执行线程和"),s("code",[t._v("dispatch_async")]),t._v("上下文线程不是同一个线程；")])]),t._v(" "),s("p",[t._v("----------------------如下是补充内容----------------------")]),t._v(" "),s("h2",{attrs:{id:"使用串行同步队列保护代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用串行同步队列保护代码"}},[t._v("#")]),t._v(" 使用串行同步队列保护代码")]),t._v(" "),s("p",[t._v("先来看一段代码：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSURLSessionDataTask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("dataTaskWithRequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSURLRequest "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("request\n                            completionHandler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSURLResponse "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id responseObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NSError "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("completionHandler\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    __block NSURLSessionDataTask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dataTask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nil"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("url_session_manager_creation_queue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mark 1")]),t._v("\n        dataTask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("session dataTaskWithRequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" addDelegateForDataTask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("dataTask completionHandler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("completionHandler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mark 2")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dataTask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这段代码是在 AFNetworking 框架的"),s("code",[t._v("AFURLSessionManager.m")]),t._v("中定义的，用于创建 Data Task（"),s("code",[t._v("NSURLSessionDataTask")]),t._v("实例），这短短几行代码的逻辑是：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("mark 1")]),t._v("以同步派发的方式提交任务 – 创建一个"),s("code",[t._v("NSURLSessionDataTask")]),t._v("实例；")]),t._v(" "),s("li",[s("code",[t._v("mark 2")]),t._v("处被阻塞；")]),t._v(" "),s("li",[s("code",[t._v("NSURLSessionDataTask")]),t._v("实例创建完成，继续执行"),s("code",[t._v("mark 2")]),t._v("及后续代码；")])]),t._v(" "),s("p",[t._v("曾经对这几行代码比较疑惑：为什么使用"),s("code",[t._v("dispatch_sync")]),t._v("派发任务呢？")]),t._v(" "),s("p",[t._v("现在是能够理解了，上述"),s("code",[t._v("url_session_manager_creation_queue()")]),t._v("函数返回的其实是一个 serial dispatch queue，这种组合（"),s("code",[t._v("dispatch_sync")]),t._v("+串行队列）即所谓的"),s("strong",[t._v("串行同步队列")]),t._v("。串行同步队列常被用来保护临界资源，确保临界资源的线程安全，作用类似于同步锁，估摸着"),s("code",[t._v("dataTaskWithRequest:")]),t._v("并不是一个线程安全方法。")]),t._v(" "),s("h2",{attrs:{id:"使用-dispatch-sync-的注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-dispatch-sync-的注意事项"}},[t._v("#")]),t._v(" 使用 dispatch_sync 的注意事项")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Concurrency Programming Guide"),s("OutboundLink")],1),t._v("有包括关于使用"),s("code",[t._v("dispatch_sync")]),t._v("的提示：")]),t._v(" "),s("blockquote",[s("p",[t._v("Important: You should never call the dispatch_sync or dispatch_sync_f function from a task that is executing in the same queue that you are planning to pass to the function. This is particularly important for serial queues, which are guaranteed to deadlock, but should also be avoided for concurrent queues.")])]),t._v(" "),s("p",[t._v("简单来说，在"),s("code",[t._v("dispatch_sync")]),t._v("嵌套使用时要注意：不能在一个嵌套中使用同一个 serial dispatch queue，因为会发生死锁；")]),t._v(" "),s("p",[t._v("假设有如下这么一段代码要执行：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("test "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dispatch_queue_t aSerialDispatchQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_queue_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I.am.an.iOS.developer"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DISPATCH_QUEUE_SERIAL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aSerialDispatchQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// block 1")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Good Night, Benjamin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aSerialDispatchQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// block 2")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Good Night, Daisy"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("自己试着执行以下就会发现：「"),s("code",[t._v("Good Night, Daisy")]),t._v("」这一句永远都无法被打印出来，原因很简单，程序产生了死锁。为什么会产生死锁呢？")]),t._v(" "),s("p",[t._v("可以想象"),s("code",[t._v("aSerialDispatchQueue")]),t._v("在底层实现中有一把锁，这把锁确保 serial dispatch queue 中只有一个 block 被执行，当执行到"),s("code",[t._v("block 1")]),t._v("代码时，这把锁为"),s("code",[t._v("block 1")]),t._v("所持有，当"),s("code",[t._v("block 1")]),t._v("执行完了，会释放之；然而"),s("code",[t._v("block 1")]),t._v("同步派发了一个任务"),s("code",[t._v("block 2")]),t._v("，同步派发意味着"),s("code",[t._v("block 1")]),t._v("会被阻塞，直到"),s("code",[t._v("block 2")]),t._v("被执行完成；但是这里产生了矛盾，"),s("code",[t._v("block 2")]),t._v("顺利执行的前提是"),s("code",[t._v("aSerialDispatchQueue")]),t._v("的这把锁被"),s("code",[t._v("block 1")]),t._v("释放，但是"),s("code",[t._v("block 1")]),t._v("释放这把锁的前提是"),s("code",[t._v("block 1")]),t._v("执行完成...这就是典型的 dead lock。")]),t._v(" "),s("p",[t._v("这一段代码还好，比较容易避免，但是如果对 GCD 理解不深，更多的时候容易写出如下代码：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("viewDidLoad "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" viewDidLoad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 巴拉巴拉，做了很多事情")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Good Night, Benjamin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_get_main_queue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// refresh UI")]),t._v("\n    \n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Good Night, Daisy"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这段代码的问题其实和上一段代码类似，只不过这里的 serial dispatch queue 恰好是 main queue。")]),t._v(" "),s("p",[t._v("上述的死锁问题主要针对"),s("strong",[t._v("同步串行队列")]),t._v("，对于"),s("strong",[t._v("同步并发队列")]),t._v("，根据我的理解应该不存在这个 deadlock 问题，但是《Concurrency Programming Guide》明确说了：")]),t._v(" "),s("blockquote",[s("p",[t._v("...This is particularly important for serial queues, which are guaranteed to deadlock, but should also be avoided for concurrent queues.")])]),t._v(" "),s("p",[t._v("P.S: 目前还不理解这个说辞。")]),t._v(" "),s("h2",{attrs:{id:"本文参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本文参考"}},[t._v("#")]),t._v(" 本文参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Concurrency Programming Guide"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://book.douban.com/subject/21370593/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Effective Objective-C 2.0"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);