(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{128:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("Objective-C 对象收到消息之后，究竟会调用何种方法需要在运行期间才能解析出来。那你也许会问：与给定的选择子名称相应的方法是不是也可以在 runtime 改变呢？没错，就是这样。"),n("strong",[t._v("若能善用此特性，则可发挥出巨大优势，因为我们既不需要源代码，也不需要通过继承子类来覆写方法就能改变这个类本身的功能")]),t._v("。这样一来，新功能将在本类的所有实例中生效，而不仅限于覆写了相关方法的那些子类实例。此方案就是大名鼎鼎的"),n("strong",[t._v("method swizzling")]),t._v("，中文常称之为「方法调配」或「方法调和」或「方法混合」。")]),t._v(" "),n("h2",{attrs:{id:"method-swizzling"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#method-swizzling"}},[t._v("#")]),t._v(" Method Swizzling")]),t._v(" "),n("p",[n("strong",[t._v("类的方法列表会把选择子的名称映射到相关的方法实现之上")]),t._v("，使得"),n("strong",[t._v("动态消息派发系统")]),t._v("（dynamic message-dispatch system）能够据此找到应该调和的方法。这些方法均以函数指针的形式来表示，这种指针叫 IMP（IMP 在《"),n("router-link",{attrs:{to:"/post/understanding-objective-c-runtime-part-1/"}},[t._v("理解 Objective-C Runtime（一）预备知识")]),t._v("》已有说明）。")],1),t._v(" "),n("p",[t._v("举个栗子，"),n("code",[t._v("NSString")]),t._v("类可以响应"),n("code",[t._v("lowercaseString")]),t._v("、"),n("code",[t._v("uppercaseString")]),t._v("、"),n("code",[t._v("capitalizedString")]),t._v("等选择子。这张映射表（selector table，也常称为"),n("strong",[t._v("选择器表")]),t._v("）中的每个选择子都映射到不同的 IMP 之上，如下图所示：")]),t._v(" "),n("e-img",{attrs:{src:"/image/QQ20150428-1.png"}}),t._v(" "),n("p",[t._v("Objective-C runtime 系统提供的几个方法都能够用来操作这张表。开发者可以向其中新增 selector，也可以改变某个 selector 所对应的方法实现，还可以交换两个 selector 所映射到的指针。经过几次操作之后，类的方法就会变成如下图所示：")]),t._v(" "),n("e-img",{attrs:{src:"/image/QQ20150428-2.png"}}),t._v(" "),n("p",[t._v("在新的映射表中，多了一个名为 newSelector 的选择子，lowercaseString 和 uppercaseString 的实现则互换了。上述修改均无需编写子类，只要修改"),n("strong",[t._v("方法表")]),t._v("的布局即可，就会反映到程序中所有的 NSString 实例之上。")]),t._v(" "),n("h2",{attrs:{id:"交换两个方法的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#交换两个方法的实现"}},[t._v("#")]),t._v(" 交换两个方法的实现")]),t._v(" "),n("p",[t._v("现在通过示例代码演绎「调换"),n("code",[t._v("NSString")]),t._v("的"),n("code",[t._v("lowercaseString")]),t._v("和"),n("code",[t._v("uppercaseString")]),t._v("的方法实现」，具体实现操作是这样的：")]),t._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("viewDidLoad "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" viewDidLoad"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    NSString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("aString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"AbcDEfg"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lowercaseString和uppercaseString交换前：")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"lowercaseString和uppercaseString交换前："')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"lowercase of the string : %@"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("aString lowercaseString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"uppercase of the string : %@"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("aString uppercaseString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// class_getInstanceMethod方法得到Method类型")]),t._v("\n    Method originalMethod "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getInstanceMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSString class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lowercaseString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Method swappedMethod "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getInstanceMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSString class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uppercaseString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// method_exchangeImplementations交换映射指针")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_exchangeImplementations")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("originalMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" swappedMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lowercaseString和uppercaseString交换后：")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"lowercaseString和uppercaseString交换后："')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"lowercase of the string : %@"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("aString lowercaseString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"uppercase of the string : %@"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("aString uppercaseString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 输出结果：\nlowercaseString和uppercaseString交换前：\nlowercase of the string : abcdefg\nuppercase of the string : ABCDEFG\nlowercaseString和uppercaseString交换后：\nlowercase of the string : ABCDEFG\nuppercase of the string : abcdefg\n*/")]),t._v("\n")])])]),n("p",[t._v("这演示了如何交换两个方法的实现，然而在实际应用中，像这样直接交换两个方法实现，其意义不大，除非闲得蛋疼。但是，可以通过这一手段来为既有的方法实现增添新功能。")]),t._v(" "),n("h2",{attrs:{id:"修改既有方法的行为"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改既有方法的行为"}},[t._v("#")]),t._v(" 修改既有方法的行为")]),t._v(" "),n("p",[t._v("介绍一个技巧，最好的方式就是提出具体的需求，然后用它跟其他的解决方法做比较。")]),t._v(" "),n("p",[t._v("所以，先来看看我们的需求：对 App 的用户行为进行追踪和分析。简单说，就是当用户看到某个 View 或者点击某个 Button 的时候，就把这个事件记下来。")]),t._v(" "),n("p",[n("strong",[t._v("手动添加")])]),t._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" MyViewController "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("viewDidAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("animated\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" viewDidAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("animated"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Custom code ")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Logging")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Logging logWithEventName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"my view did appear"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("myButtonClicked"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("sender\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Custom code ")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Logging")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Logging logWithEventName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"my button clicked"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这种方式的缺点也很明显：它破坏了代码的干净整洁。因为 Logging 的代码本身并不属于 View Controller 里的主要逻辑。随着项目扩大、代码量增加，你的 View Controller 里会到处散布着 Logging 的代码。这时，要找到一段事件记录的代码会变得困难，也很容易忘记添加事件记录的代码。")]),t._v(" "),n("p",[t._v("你可能会想到用继承或类别，在重写的方法里添加事件记录的代码。代码可以是长的这个样子：")]),t._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("myViewDidAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("animated\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" viewDidAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("animated"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Custom code ")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Logging")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Logging logWithEventName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSStringFromClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("myButtonClicked"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("sender\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Custom code ")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Logging")]),t._v("\n    NSString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSString stringWithFormat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("“my button "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v(" is clicked”"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSStringFromClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Logging logWithEventName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("Logging 的代码都很相似，通过继承或类别重写相关方法是可以把它从主要逻辑中剥离出来。但同时也带来新的问题：")]),t._v(" "),n("ol",[n("li",[t._v("你需要继承"),n("code",[t._v("UIViewController")]),t._v("，"),n("code",[t._v("UITableViewController")]),t._v("，"),n("code",[t._v("UICollectionViewController")]),t._v("所有这些 View Controller，或者给他们添加类别；")]),t._v(" "),n("li",[t._v("每个 View Controller 里的 ButtonClick 方法命名不可能都一样；")]),t._v(" "),n("li",[t._v("你不能控制别人如何去实例化你的子类；")]),t._v(" "),n("li",[t._v("对于类别，你没办法调用到原来的方法实现，大多时候，我们重写一个方法只是为了添加一些代码，而不是完全取代它；")]),t._v(" "),n("li",[t._v("如果有两个类别都实现了相同的方法，运行时没法保证哪一个类别的方法会给调用。")])]),t._v(" "),n("p",[n("strong",[t._v("Method Swizzling 的做法")])]),t._v(" "),n("p",[t._v("Method Swizzling 的做法是新增一个方法"),n("code",[t._v("log_viewDidAppear:")]),t._v("，在这个方法体中调用"),n("code",[t._v("viewDidAppear:")]),t._v("的方法体；然后将"),n("code",[t._v("log_viewDidAppear:")]),t._v("和"),n("code",[t._v("viewDidAppear:")]),t._v("进行调换。呃，有些绕，看图吧：")]),t._v(" "),n("e-img",{attrs:{src:"/image/QQ20150428-3.png",alt:"交换log_viewDidAppear:和viewDidAppear:的实现"}}),t._v(" "),n("p",[t._v("新增方法"),n("code",[t._v("log_viewDidAppear:")]),t._v("的实现代码可以这样写：")]),t._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("log_viewDidAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("animated\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" log_viewDidAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("animated"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Logging")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Logging logWithEventName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSStringFromClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("看起来，这段代码好像会陷入递归使用的死循环，不过要记住，此方法是准备和"),n("code",[t._v("viewDidAppear:")]),t._v("方法互换的。所以，在 runtime，"),n("code",[t._v("log_viewDidAppear:")]),t._v("选择子对应的是原来"),n("code",[t._v("viewDidAppear:")]),t._v("方法的实现；同样，当向对象发送"),n("code",[t._v("viewDidAppear:")]),t._v("消息时，如上这段代码会被调用，而这段代码的第一句是"),n("code",[t._v("[self log_viewDidAppear:animated];")]),t._v("，这其实是调用原来"),n("code",[t._v("viewDidAppear:")]),t._v("方法的实现代码...")]),t._v(" "),n("p",[t._v("定义了"),n("code",[t._v("log_viewDidAppear:")]),t._v("的实现后，还得与"),n("code",[t._v("viewDidAppear:")]),t._v("进行交换：")]),t._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// class_getInstanceMethod方法得到Method类型")]),t._v("\nMethod originalMethod "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getInstanceMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSString class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("viewDidAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nMethod swappedMethod "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getInstanceMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSString class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("log_viewDidAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// method_exchangeImplementations交换映射指针")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_exchangeImplementations")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("originalMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" swappedMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("如何安排 method swizzling 相关的代码？")]),t._v(" "),n("p",[t._v("一般来说，runtime 相关的代码都会以 category 的形式组织，所以上述"),n("code",[t._v("log_viewDidAppear:")]),t._v("方法的实现会写在一个 UIViewController category 中，比如"),n("code",[t._v("UIViewController+log.h")]),t._v("。而"),n("strong",[t._v("交换方法")]),t._v("相关的代码会写在 category 的 load 中。因为 load 方法是在 runtime 之前就被执行的，只要 category 所在的头文件被引用，load 方法就会被调用，并且同一个 class 在不同 category 之间允许有多个 load 方法，这些 load 方法都会被调用（唯一的问题是谁先谁后）。")]),t._v(" "),n("p",[t._v("通过 method swizzling 方案，开发者可以为那些完全不知道具体实现的（completely opaque，完全不透明）黑盒方法增加日志记录功能，这非常有助于程序调试，然而，此做法只在调试程序时有用。很少有人在调试程序之外的场合用上述"),n("strong",[t._v("方法调配技术")]),t._v("来永久改变某个类的功能，因为如果使用不慎，它造成的破坏太大了，并且很难 Debug。不能仅仅因为 Objective-C 语言里有这个特性就一定要用它。若是滥用，反而会令代码变得不易读懂且难于维护。")]),t._v(" "),n("p",[t._v("总之，Method Swizzling 只一个挺有争议的技术，对此有很多分析的文章，底部的参考资料中有链接。")]),t._v(" "),n("p",[n("strong",[t._v("补充")])]),t._v(" "),n("p",[t._v("后来终于有机会在实际项目中使用到 method swizzling。应用场景是这样的，接手了一个完整的项目，我的任务是在该项目基础上添加一些功能，顺便将项目整理一下，尽可能清理没有用的内容和过时的技术。项目页面非常多，各种文件的命名非常糟糕，我首先需要做的事情是将页面逻辑给整理出来（各种 View Controller 之间的逻辑关系），简单来说，我需要结合所看到的运行页面（譬如首页），将它的 View Controller 类给找出来。")]),t._v(" "),n("p",[t._v("比较蠢的做法当然是去查看代码了。好在我比较机灵，决定使用 method swizzling 技术，让每个页面将它的 View Controller 类名自己喊出来。")]),t._v(" "),n("p",[t._v("我的思路：定义一个 UIViewController category，添加一个方法，该方法调用"),n("code",[t._v("viewDidAppear:")]),t._v("，并且将该类的名字给打印出来，然后将该方法的 SEL 和"),n("code",[t._v("viewDidAppear:")]),t._v("方法的 SEL 调换，这样系统在回调"),n("code",[t._v("viewDidAppear:")]),t._v("时会定义该方法代码，如下：")]),t._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" UIViewController "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sayHello"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("load "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    SEL originalSelector "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("viewDidAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    SEL swizzledSelector "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("swizzled_viewDidAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// class_getInstanceMethod方法得到Method类型")]),t._v("\n    Method originalMethod "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getInstanceMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" originalSelector"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Method swizzledMethod "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getInstanceMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" swizzledSelector"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// method_exchangeImplementations交换映射指针")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_exchangeImplementations")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("originalMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" swizzledMethod"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("swizzled_viewDidAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("animated "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" swizzled_viewDidAppear"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("animated"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"hello, my name is %@"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSStringFromClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n")])])]),n("h2",{attrs:{id:"aop-aspect-oriented-programming"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aop-aspect-oriented-programming"}},[t._v("#")]),t._v(" AOP(Aspect Oriented Programming)")]),t._v(" "),n("p",[t._v("在阅读博客"),n("a",{attrs:{href:"http://tech.glowing.com/cn/method-swizzling-aop/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Method Swizzling 和 AOP 实践"),n("OutboundLink")],1),t._v("时了解到了一个新概念 -- "),n("code",[t._v("AOP")]),t._v("。")]),t._v(" "),n("p",[t._v("简单来说，在 Objective-C 世界中，AOP 就是利用 Runtime 特性给指定的方法添加自定义代码，Method Swizzling 是其中一种实现 AOP 的方式之一。")]),t._v(" "),n("p",[t._v("Mark 一下，暂不多讲。")]),t._v(" "),n("h2",{attrs:{id:"本文参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本文参考"}},[t._v("#")]),t._v(" 本文参考")]),t._v(" "),n("ul",[n("li",[t._v("《Effective Objective-C 2.0》")]),t._v(" "),n("li",[t._v("《iOS 开发进阶》")]),t._v(" "),n("li",[n("a",{attrs:{href:"http://tech.glowing.com/cn/method-swizzling-aop/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Method Swizzling 和 AOP 实践"),n("OutboundLink")],1)]),t._v(" "),n("li",[t._v("AFNetworking 作者 Mattt Thompson 大神的"),n("a",{attrs:{href:"http://nshipster.com/method-swizzling/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Method Swizzling"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"http://blog.csdn.net/yiyaaixuexi/article/details/9374411",target:"_blank",rel:"noopener noreferrer"}},[t._v("Objective-C 的 hook 方案（一）: Method Swizzling"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"http://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c",target:"_blank",rel:"noopener noreferrer"}},[t._v("What are the Dangers of Method Swizzling in Objective C?"),n("OutboundLink")],1),t._v("；")]),t._v(" "),n("li",[n("a",{attrs:{href:"http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/#Method_Swizzling",target:"_blank",rel:"noopener noreferrer"}},[t._v("Objective-C Runtime"),n("OutboundLink")],1)])])],1)}),[],!1,null,null,null);s.default=e.exports}}]);