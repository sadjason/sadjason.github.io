(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{120:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("写本文的原因是今天被要求「调研在 iOS 中加载本地 HTML 的相关技术」，好记性不如烂笔头，将一些东西给记录下来吧。")]),t._v(" "),a("p",[t._v("应用场景是这样的：手头的 iOS App 有一部分 UI 需要使用 HTML 完成，好处是这部分 UI 可以更灵活，即可以在任何不需要升级 App 的情况下更新这部分 UI（包括样式、操作等等）。当下非常火的技术 -- Facebook 的 React Native -- 正是用来解决这种问题的，毕竟在传统的开发模式下，更新 UI 必须要升级 App，而升级 App 是一个非常耗时的过程。使用 Web App 部分代替 Native App 已经成为当下移动客户端开发的一种思潮了。为了简便起见，也为了不给项目的接盘者制造更高的门槛，暂时决定不使用 React Native（原因是多方面的）等著名框架去这种事情，从 0 开始探究。话说胡来，也许走了这么一遭之后，以后学习 React Native 会有更多的体会呢！")]),t._v(" "),a("p",[t._v("总之，目前的构想是这样的：")]),t._v(" "),a("ol",[a("li",[t._v("App 部分 UI 是由 HTML+JS+CSS 完成的，HTML+JS+CSS 代码会随着 App 一起发布；")]),t._v(" "),a("li",[t._v("当后端决定更新 App 的部分 UI（HTML）时，客户端从服务器下载最新的 HTML+JS+CSS 包，解压后代替本地的、旧的 HTML+JS+CSS 资源，将最新的呈现给用户，至此完成 UI 的更新；")])]),t._v(" "),a("p",[t._v("因此有这么些问题需要考虑：")]),t._v(" "),a("ol",[a("li",[t._v("加载本地 HTML+JS+CSS 资源（在 iOS 中，通常使用 UIWebView）；")]),t._v(" "),a("li",[t._v("解压从服务端下载的压缩文件（HTML+JS+   CSS 包）；")]),t._v(" "),a("li",[t._v("JS 代码和 OC 代码的互相调用；")])]),t._v(" "),a("p",[t._v("本文主要探究第一个问题！")]),t._v(" "),a("h2",{attrs:{id:"uiwebview-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uiwebview-介绍"}},[t._v("#")]),t._v(" UIWebView 介绍")]),t._v(" "),a("p",[t._v("UIWebView 是 iOS 中一个非常常用的控件，是内置的浏览器控件，可能也是最强大复杂的控件。可以用它来浏览网页、打开文档（譬如 PDF 文档）等等。")]),t._v(" "),a("p",[t._v("UIWebView 既可以用来显示本地文档，也可以用来显示网络文档。无论是显示本地文件还是网络文件，此过程都可以统称为「加载」。与「加载」相关的方法不多，只有三个：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Loading Local Content or Loading Content From the Network")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("loadRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSURLRequest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 嵌入HTML结构的字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("loadHTMLString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("string\n               baseURL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSURL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("baseURL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Loading Local Content")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("loadData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("data\n        MIMEType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("MIMEType\ntextEncodingName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("textEncodingName\n         baseURL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSURL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("baseURL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("与 UIWebView 相关的知识点并不多（从某种角度来看，也可以认为是 Apple 封装得比较好吧），除了上述的三个方法之外，还有必要了解的是 UIWebViewDelegate 定义的一些 delegate 方法：")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始加载前调用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("webView"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UIWebView "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("webView shouldStartLoadWithRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSURLRequest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("request\n navigationType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UIWebViewNavigationType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("navigationType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始加载时调用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("webViewDidStartLoad"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UIWebView "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("webView"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加载成功时调用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("webViewDidFinishLoad"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UIWebView "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("webView"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加载失败时调用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("webView"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UIWebView "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("webView didFailLoadWithError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSError "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("除此之外，UIWebView 似乎有啥其他需要了解的内容，若有需要，以后再补充吧！")]),t._v(" "),a("h2",{attrs:{id:"加载本地-html-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载本地-html-文件"}},[t._v("#")]),t._v(" 加载本地 HTML 文件")]),t._v(" "),a("p",[t._v("加载本地 HTML 文件不是多么难的事情，但再简单的事情也有一个 1-2-3-4，不是嘛？何况笔者比较笨，参考"),a("a",{attrs:{href:"http://blog.csdn.net/kaitiren/article/details/17115085",target:"_blank",rel:"noopener noreferrer"}},[t._v("UIWebView 加载本地 HTML5 文件"),a("OutboundLink")],1),t._v("，也分几个步骤：")]),t._v(" "),a("ol",[a("li",[t._v("准备 HTML 文件及其资源文件（主要是 CSS 文件和 JS 文件以及 image 文件）；")]),t._v(" "),a("li",[t._v("加载本地 HTML 文件；")])]),t._v(" "),a("p",[t._v("第一种：\nloadRequest:\n第二种：\nloadHTMLString:baseURL:")]),t._v(" "),a("p",[a("strong",[t._v("第一步，准备 HTML 文件及其资源文件。")])]),t._v(" "),a("p",[t._v("HTML 及其资源文件比较容易获取，随便找个比较漂亮的 web 页面，将它保存起来即可！")]),t._v(" "),a("p",[t._v("显然 HTML 文件及其资源文件是需要添加到工程的，问题是如何添加呢？如何组织管理这些文件呢？沙盒？Bundle？")]),t._v(" "),a("p",[a("strong",[t._v("Xcode 工程添加文件有两种方式")])]),t._v(" "),a("p",[t._v("向项目中添加已有的文件（或资源文件，或第三方库）不是什么稀罕的事情，只是平时都没怎么注意。实际上，将「文件」或者「目录」添加到项目时，Xcode 给了我们两个选项：Create groups 以及 Create folder references，如下图：")]),t._v(" "),a("e-img",{attrs:{src:"/image/20150616-01.png"}}),t._v(" "),a("p",[t._v("简单来说，若选择 Create groups 的方式添加文件夹，则文件夹的颜色是黄色的；若选择 Create folder references 的，则发现添加的文件夹在工程目录中的的颜色是蓝色的：")]),t._v(" "),a("e-img",{attrs:{src:"/image/20150616-02.png"}}),t._v(" "),a("p",[t._v("当然不只是颜色上的区别！主要是 Xcode 对加入的文件的路径处理不一样。")]),t._v(" "),a("p",[t._v("如果文件/文件夹以 Create groups 的方式添加到工程中，则不管加入项目的文件的目录结构如何，在 APP 中都可以通过 mainBundlePath/filename 这样结构来访问文件；反之，若文件/文件夹以 Create folder references 的方式添加到工程中，则会保留相对路径，访问文件的结构就变成了 mainBundlePath/path/filename。")]),t._v(" "),a("p",[t._v("理解 Create groups 以及 Create folder references 并不难，自己动手试试就能感受二者的不同了。")]),t._v(" "),a("p",[a("strong",[t._v("Bundle 介绍")])]),t._v(" "),a("p",[t._v("上文谈到了向工程添加文件的两种方式，由此延伸，不得不提 bundle，一直以来对 bundle 的理解非常模糊，知道它的本质是一个目录，也知道在 OS X 中就有此概念，但一直没 get 到"),a("code",[t._v("bundle")]),t._v("的存在意义，总感觉它没必要存在，事实上也没主动使用它。")]),t._v(" "),a("p",[t._v("借撰写本文这个机会，驱动一下自己，查查资料，争取对 bundle 理解更深入一点点吧！")]),t._v(" "),a("p",[t._v("参考《"),a("a",{attrs:{href:"http://avatar-matrix.lofter.com/post/e4689_236e82",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bundle in iOS"),a("OutboundLink")],1),t._v("》和《"),a("a",{attrs:{href:"http://www.cnblogs.com/BigPolarBear/archive/2012/03/28/2421802.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("iOS 开发里的 Bundle 是个啥玩意"),a("OutboundLink")],1),t._v("》。")]),t._v(" "),a("p",[t._v("简单地讲，bundle 就是一个内部结构按照标准规则组织的特殊目录，常用来存放一些资源文件，譬如图片，plist 文件等，它不会成为编译的一部分，所以它不存放能够被编译的文件，譬如"),a("code",[t._v(".m")]),t._v("、"),a("code",[t._v(".h")]),t._v("文件等。")]),t._v(" "),a("p",[t._v("Bundle 的主要用途是软件的国际化，想象一个应用场景：软件有美国、中国版本，软件的 logo 等图片不同，这时候，我们把相应的图片资源放到一个文件夹下，然后修改文件夹的名字，以"),a("code",[t._v(".bundle")]),t._v("作为后缀，然后添加到 xcode 中。")]),t._v(" "),a("p",[t._v("有过 iOS 开发经历的人都应该知道，每个 project 都有个 mainBundle，那如何去获取自己定义的 bundle 内容呢？我们把自定义的 bundle 当成项目的一种资源，由 mainBundle 去获取"),a("code",[t._v("~")]),t._v("，然后我们用相同的方式获取自定义的 bundle 下的资源。即：")]),t._v(" "),a("p",[t._v("1、通过 mainBundle 去加载自定义的 bundle；\n2、通过获取到的自定义 bundle 去获取资源；")]),t._v(" "),a("p",[t._v("根据上述场景来写的 demo 项目结构如下：")]),t._v(" "),a("e-img",{attrs:{src:"/image/20150616-03.png"}}),t._v(" "),a("p",[t._v("此时，我容易联想到了在 Windows 世界经常使用的「汉化包」。根据我的理解，我们通过某种手段得到的「汉化包」和本文所谈及的 bundle 是类似的概念，它们的本质是一个目录，只是这个目录有些特别，特别之处在于它只存放一些资源文件，以及目录名后缀为"),a("code",[t._v(".bundle")]),t._v("，这让它看起来像个文件，但实际上又不是文件，开发者又特别想让普通用户以为它是一个文件...")]),t._v(" "),a("p",[t._v("总之，bundle 就是这么个东东。")]),t._v(" "),a("p",[t._v("到了这里，应该弄清楚了该把 HTML 文件及其资源放在哪里了。")]),t._v(" "),a("p",[t._v("沙盒？显然不可能，沙盒可是 App 到设备之后才有的概念；所以我们只能让 HTML 资源成为工程的一部分呢，编译打包时作为安装包的一部分。")]),t._v(" "),a("p",[t._v("放在普通目录下还是组织成 bundle，个人以为没必要组织成 bundle，因为后者主要用来处理国际化问题，国际化问题面对的一般是图片资源、字符串资源等等，所以不需要组成成 bundle，而是直接添加到工程的 mainBundle 中。")]),t._v(" "),a("p",[t._v("上文已经提到了 Xcode 工程添加文件有两种方式：Create groups 和 Create folder references，个人以为应该选择后者！")]),t._v(" "),a("p",[t._v("值得注意是，当被加入到项目中的文件包含 js 文件时，有可能因为操作不慎等原因，js 文件成为了编译文件，若是这样，应该将它从"),a("code",[t._v("Compile Sources")]),t._v("给踢掉，让它成为"),a("code",[t._v("Copy Bundle Resources")]),t._v("的一部分，具体做法是在 TARGETS->Build Phases 中的"),a("code",[t._v("Compile Sources")]),t._v("中找到该 js 文件，并将其移到"),a("code",[t._v("Copy Bundle Resources")]),t._v("中，如下图所示：")]),t._v(" "),a("e-img",{attrs:{src:"/image/20150616-05.png"}}),t._v(" "),a("p",[a("strong",[t._v("第二步，加载本地 HTML。")])]),t._v(" "),a("p",[t._v("本文示例中，HTML 文件及其资源文件被组织在一个叫"),a("code",[t._v("html")]),t._v("的目录中，目录结构如下图，index.html 是要被加载的目标文件，index.html 中访问 css、js 以及图片资源的方式都是使用相对路径，实现代码也给展示在下图中。")]),t._v(" "),a("e-img",{attrs:{src:"/image/20150616-04.png"}}),t._v(" "),a("p",[t._v("上图右侧代码区域加载策略是，先获取本地 HTML 文本，转为字符串，然后使用"),a("code",[t._v("loadHTMLString:baseURL:")]),t._v("方法加载；当然也可以使用"),a("code",[t._v("loadRequest:")]),t._v("方法，哪个更好？我暂时也不知道！")]),t._v(" "),a("p",[a("strong",[t._v("关于 baseURL")])]),t._v(" "),a("p",[t._v("上文"),a("code",[t._v("loadHTMLString:baseURL:")]),t._v("方法的第二个参数是 baseURL，baseURL 是 HTML 字符串中引用到资源的查找路径，当 HTML 中没有引用外部资源时，可以指定为"),a("code",[t._v("nil")]),t._v("；若引用了外部资源，一般情况下使用 mainBundle 的路径即可。在实际操作中，常常会出现「文本显示正常，图片无法显示」等情况，若 HTML 文本中引用外部资源都是使用相对路径，则出现这种问题的原因一般都是 baseURL 参数错误（有时甚至是"),a("code",[t._v("nil")]),t._v("）。")]),t._v(" "),a("p",[t._v("最后，本文的 Demo 详见"),a("a",{attrs:{href:"https://github.com/sadjason/iOSDemos/tree/master/UIWebView%E9%9D%9E%E5%88%9D%E4%BD%93%E9%AA%8C",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("。")])],1)}),[],!1,null,null,null);e.default=n.exports}}]);