(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{152:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("本文记录 Objective-C 的一些基础知识，不包括 ARC、Block、RunLoop、GCD 等。")]),t._v(" "),s("p",[t._v("先抛出相关问题用以自查：")]),t._v(" "),s("ul",[s("li",[t._v("能画出那张经典的类图吗？")]),t._v(" "),s("li",[t._v("一个 Objective-C 对象的 isa 指针指向哪里，有什么用？")]),t._v(" "),s("li",[t._v("什么是 metaclass？为什么需要 metaclass？")]),t._v(" "),s("li",[t._v("为什么 objc_msgSend 一定要用汇编实现？")]),t._v(" "),s("li",[t._v("如何理解 self 和 super？")]),t._v(" "),s("li",[t._v("category 中的方法会覆盖原方法吗？")]),t._v(" "),s("li",[t._v("@property 的本质是啥？从结构上看，property 是啥？")]),t._v(" "),s("li",[t._v("@synthesize 的作用是啥？在哪些场合下会使用？")]),t._v(" "),s("li",[t._v("@dynamic 的作用是啥？在哪些场合下会使用？")]),t._v(" "),s("li",[t._v("@synthesize 和 @dynamic 能同时使用吗？")]),t._v(" "),s("li",[t._v("使用 @dynamic 的 property 还有 ivar 吗？")]),t._v(" "),s("li",[t._v("如何理解"),s("code",[t._v("NSInvocation")]),t._v("？")]),t._v(" "),s("li",[t._v("performSelector 相较于 NSInvocation 有啥局限性？")]),t._v(" "),s("li",[t._v("performSelector 的 leak 警告是怎么回事儿？")]),t._v(" "),s("li",[s("code",[t._v("+load")]),t._v("的特点？执行时机？应用场景？")]),t._v(" "),s("li",[s("code",[t._v("+initialize")]),t._v("的特点？执行时机？应用场景？")]),t._v(" "),s("li",[t._v("Method Swizzle 有那些坑？如何规避这些坑？")]),t._v(" "),s("li",[t._v("消息转发机制是怎样的？")]),t._v(" "),s("li",[t._v("为什么要有"),s("code",[t._v("objc_msgSend_stret")]),t._v("、"),s("code",[t._v("objc_msgSend_fpret")]),t._v("函数？")]),t._v(" "),s("li",[t._v("方法缓存表中的内容是什么？")]),t._v(" "),s("li",[s("code",[t._v("+resolveInstanceMethod:")]),t._v("的应用场景？")]),t._v(" "),s("li",[s("code",[t._v("-forwardingTargetForSelector:")]),t._v("的应用场景？")]),t._v(" "),s("li",[s("code",[t._v("-forwardInvocation")]),t._v("的应用场景？")]),t._v(" "),s("li",[t._v("atomic 的实现原理？")]),t._v(" "),s("li",[t._v("atomic 有什么线程不安全的地方？")]),t._v(" "),s("li",[t._v("如何实现属性的 atomic？")]),t._v(" "),s("li",[t._v("为什么说 Objective-C 是一门动态语言？")]),t._v(" "),s("li",[t._v("Framework 了解一下？")]),t._v(" "),s("li",[t._v("TaggedPointer 了解一下？")])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#对象模型"}},[t._v("对象模型")]),s("ul",[s("li",[s("a",{attrs:{href:"#isa-指针"}},[t._v("isa 指针")])]),s("li",[s("a",{attrs:{href:"#metaclass"}},[t._v("metaclass")])]),s("li",[s("a",{attrs:{href:"#类图"}},[t._v("类图")])])])]),s("li",[s("a",{attrs:{href:"#objc-msgsend"}},[t._v("objc_msgSend")]),s("ul",[s("li",[s("a",{attrs:{href:"#objc-msgsend-的本质"}},[t._v("objc_msgSend 的本质")])]),s("li",[s("a",{attrs:{href:"#为什么-objc-msgsend-一定要用汇编实现？"}},[t._v("为什么 objc_msgSend 一定要用汇编实现？")])])])]),s("li",[s("a",{attrs:{href:"#self-super"}},[t._v("self & super")])]),s("li",[s("a",{attrs:{href:"#lookupimporforward"}},[t._v("lookUpImpOrForward")])]),s("li",[s("a",{attrs:{href:"#category"}},[t._v("category")])]),s("li",[s("a",{attrs:{href:"#属性：-property、-synthesize、-dynamic"}},[t._v("属性：@property、@synthesize、@dynamic")]),s("ul",[s("li",[s("a",{attrs:{href:"#property-的本质"}},[t._v("@property 的本质")])]),s("li",[s("a",{attrs:{href:"#自动合成"}},[t._v("自动合成")])]),s("li",[s("a",{attrs:{href:"#synthesize"}},[t._v("@synthesize")])]),s("li",[s("a",{attrs:{href:"#dynamic"}},[t._v("@dynamic")])]),s("li",[s("a",{attrs:{href:"#相关问题"}},[t._v("相关问题")])])])]),s("li",[s("a",{attrs:{href:"#nsinvocation"}},[t._v("NSInvocation")])]),s("li",[s("a",{attrs:{href:"#performselector"}},[t._v("performSelector")])]),s("li",[s("a",{attrs:{href:"#load-方法-initialize"}},[t._v("+load 方法 && +initialize")])]),s("li",[s("a",{attrs:{href:"#method-swizzle"}},[t._v("Method Swizzle")]),s("ul",[s("li",[s("a",{attrs:{href:"#method-swizzle-有那些坑？"}},[t._v("Method Swizzle 有那些坑？")])])])]),s("li",[s("a",{attrs:{href:"#消息转发机制"}},[t._v("消息转发机制")]),s("ul",[s("li",[s("a",{attrs:{href:"#resolveinstancemethod-的应用场景"}},[t._v("+resolveInstanceMethod: 的应用场景")])]),s("li",[s("a",{attrs:{href:"#forwardingtargetforselector-的应用场景？"}},[t._v("-forwardingTargetForSelector: 的应用场景？")])]),s("li",[s("a",{attrs:{href:"#forwardinvocation-的应用场景？"}},[t._v("-forwardInvocation: 的应用场景？")])])])]),s("li",[s("a",{attrs:{href:"#几道神经病院题目"}},[t._v("几道神经病院题目")])]),s("li",[s("a",{attrs:{href:"#其他"}},[t._v("其他")]),s("ul",[s("li",[s("a",{attrs:{href:"#为什么说-objective-c-是一门动态语言"}},[t._v("为什么说 Objective-C 是一门动态语言")])]),s("li",[s("a",{attrs:{href:"#tagged-pointer-了解一下"}},[t._v("Tagged Pointer 了解一下")])]),s("li",[s("a",{attrs:{href:"#atomic-有什么线程不安全的地方？"}},[t._v("atomic 有什么线程不安全的地方？")])])])])])]),s("p"),t._v(" "),s("h1",{attrs:{id:"对象模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象模型"}},[t._v("#")]),t._v(" 对象模型")]),t._v(" "),s("h2",{attrs:{id:"isa-指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#isa-指针"}},[t._v("#")]),t._v(" isa 指针")]),t._v(" "),s("p",[s("code",[t._v("isa")]),t._v("主要用来指向实例所对应类的指针，除此之外，还描述其他非常多的信息，包括：")]),t._v(" "),s("ul",[s("li",[t._v("shiftcls: 指向所属的 Class")]),t._v(" "),s("li",[t._v("has_assoc: 是否有关联引用")]),t._v(" "),s("li",[t._v("weakly_referenced: 是否被弱引用")]),t._v(" "),s("li",[t._v("deallocating: 是否正在释放")]),t._v(" "),s("li",[t._v("extra_rc: 额外的引用计数，对象实际的引用计数会在此基础上加 1")])]),t._v(" "),s("p",[s("code",[t._v("isa_t")]),t._v("是一个 union 结构，其中最低位"),s("code",[t._v("nonpointer")]),t._v("指示它是否是一个指针。")]),t._v(" "),s("h2",{attrs:{id:"metaclass"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#metaclass"}},[t._v("#")]),t._v(" metaclass")]),t._v(" "),s("p",[t._v("因为在 Objective-C 中，对象的方法并没有存储于对象的结构体中（如果每一个对象都保存了自己能执行的方法，那么对内存的占用有极大的影响）。")]),t._v(" "),s("p",[t._v("当实例方法被调用时，它要通过自己持有的"),s("code",[t._v("isa")]),t._v("来查找对应的类，进而找到对应方法的实现。同时，每一个 objc_class 也有一个指向自己的父类的指针 super_class 用来查找继承的方法。")]),t._v(" "),s("p",[t._v("类方法的实现又是如何查找并且调用的呢？这时，就需要引入元类来保证无论是类还是对象都能通过相同的机制查找方法的实现。")]),t._v(" "),s("p",[t._v("让每一个类的"),s("code",[t._v("isa")]),t._v("指向对应的元类，这样就达到了使类方法和实例方法的调用机制相同的目的：")]),t._v(" "),s("ul",[s("li",[t._v("实例方法调用时，通过对象的"),s("code",[t._v("isa")]),t._v("在类中获取方法的实现")]),t._v(" "),s("li",[t._v("类方法调用时，通过类的"),s("code",[t._v("isa")]),t._v("在元类中获取方法的实现")])]),t._v(" "),s("blockquote",[s("p",[t._v("更多参考："),s("a",{attrs:{href:"http://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("What is a meta-class in Objective-C?"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("为什么需要 metaclass？我似乎只能回答一个点：")]),t._v(" "),s("ul",[s("li",[t._v("当调用类方法的时候，保证了它和实例方法能通过相同的调用机制实现")])]),t._v(" "),s("p",[t._v("Every Class has its own unique meta-class (since every Class can have its own unique list of methods).")]),t._v(" "),s("h2",{attrs:{id:"类图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[t._v("#")]),t._v(" 类图")]),t._v(" "),s("p",[t._v("如下是一张经典类图：")]),t._v(" "),s("e-img",{attrs:{src:"/image/draft/class-diagram.png"}}),t._v(" "),s("blockquote",[s("p",[t._v("原图出自于："),s("a",{attrs:{href:"http://www.sealiesoftware.com/blog/class%20diagram.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.sealiesoftware.com/blog/class diagram.pdf"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("能画出对象、类、元类吗？如果让你手动创建一个类，这个类图的结构如何？")]),t._v(" "),s("h1",{attrs:{id:"objc-msgsend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#objc-msgsend"}},[t._v("#")]),t._v(" objc_msgSend")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n * @param self A pointer to the instance of the class that is to receive the message.\n * @param op The selector of the method that handles the message.\n * @param ... \n *   A variable argument list containing the arguments to the method.\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("objc_msgSend")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id _Nullable "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SEL _Nonnull op"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** \n * @param super A pointer to an objc_super data structure.\n * @param op A pointer of type SEL. Pass the selector of the method that will handle the message.\n * @param ...\n *   A variable argument list containing the arguments to the method.\n * \n * @return The return value of the method identified by \\e op.\n * \n * @see objc_msgSend\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("objc_msgSendSuper")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" objc_super "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" _Nonnull "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SEL _Nonnull op"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" objc_super "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   __unsafe_unretained id receiver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   __unsafe_unretained Class super_class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"objc-msgsend-的本质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#objc-msgsend-的本质"}},[t._v("#")]),t._v(" objc_msgSend 的本质")]),t._v(" "),s("p",[t._v("如下是对"),s("code",[t._v("objc_msgSend")]),t._v("的粗浅描述：")]),t._v(" "),s("ul",[s("li",[t._v("获取 receiver 的类 Class")]),t._v(" "),s("li",[t._v("在 Class 的方法列表 method table 里面查找对应 selector 的方法实现")]),t._v(" "),s("li",[t._v("找到的话就调用，返回")]),t._v(" "),s("li",[t._v("找不到就在其父类中找，重复前面的步骤（直到没有父类为止）")])]),t._v(" "),s("h2",{attrs:{id:"为什么-objc-msgsend-一定要用汇编实现？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-objc-msgsend-一定要用汇编实现？"}},[t._v("#")]),t._v(" 为什么 objc_msgSend 一定要用汇编实现？")]),t._v(" "),s("ul",[s("li",[t._v("为了速度快")]),t._v(" "),s("li",[t._v("为了应对不同类型的返回值")]),t._v(" "),s("li",[t._v("为了应对不同的参数")])]),t._v(" "),s("p",[t._v("更多阅读：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://www.arigrant.com/blog/2014/2/12/why-objcmsgsend-must-be-written-in-assembly",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么 objc_msgSend 一定要用汇编实现？"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://tutuge.me/2016/06/19/translation-why-objcmsgsend-must-be-written-in-assembly/",target:"_blank",rel:"noopener noreferrer"}},[t._v("翻译-为什么 objc_msgSend 必须用汇编实现"),s("OutboundLink")],1)])]),t._v(" "),s("h1",{attrs:{id:"self-super"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#self-super"}},[t._v("#")]),t._v(" self & super")]),t._v(" "),s("p",[s("code",[t._v("self")]),t._v("是方法的一个隐藏参数，每个方法的实现的第一个参数即为"),s("code",[t._v("self")]),t._v("，类似的隐藏参数还包括"),s("code",[t._v("_cmd")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("super")]),t._v("并不是隐藏参数，它实际上只是一个编译器标示符，它负责告诉编译器，使用"),s("code",[t._v("objc_msgSendSuper")]),t._v("而不是"),s("code",[t._v("objc_msgSend")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" Son "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Father\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instancetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("init "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" init"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",[s("li",[s("code",[t._v("self")]),t._v("和"),s("code",[t._v("super")]),t._v("是什么？")]),t._v(" "),s("li",[s("code",[t._v("[super init]")]),t._v("做了什么？")]),t._v(" "),s("li",[t._v("为什么要把"),s("code",[t._v("[super init]")]),t._v("的结构赋给"),s("code",[t._v("self")]),t._v("，只是借用一下"),s("code",[t._v("self")]),t._v("这个变量，也可以自定义一个别的变量。")])]),t._v(" "),s("p",[t._v("千万不要把"),s("code",[t._v("self")]),t._v("理解为实例的特殊实例变量...")]),t._v(" "),s("h1",{attrs:{id:"lookupimporforward"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lookupimporforward"}},[t._v("#")]),t._v(" lookUpImpOrForward")]),t._v(" "),s("p",[s("code",[t._v("lookUpImpOrForward")]),t._v("用于从 method list 中根据 sel 匹配寻找目标 IMP；查找顺序是从前往后。")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("lookUpImpOrForward")]),t._v("的内部逻辑，如果无法从 Class 以及 SuperClass 找到目标 IMP，会调用一次"),s("code",[t._v("_class_resolveMethod")]),t._v("，后者对应 OC 层的"),s("code",[t._v("+resolveInstanceMethod:")]),t._v("或者"),s("code",[t._v("+resolveClassMethod:")]),t._v("，调用后，会在内部再走一遍 lookUp 的逻辑。")]),t._v(" "),s("p",[t._v("如果最终都找不到 IMP，会调用"),s("code",[t._v("_objc_msgForward_impcache")]),t._v("走下一步的转发逻辑，后者貌似定义于 Foundation 中。")]),t._v(" "),s("h1",{attrs:{id:"category"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#category"}},[t._v("#")]),t._v(" category")]),t._v(" "),s("p",[t._v("category 方法会覆盖原方法吗？不会，我查看源码，看到的事实是，category 的会被添加到方法列表中，只是它们会放到宿主方法的前面；而"),s("code",[t._v("lookUpImpOrForward")]),t._v("查找方法是从前往后的，所以 category 的方法会被先找到。")]),t._v(" "),s("h1",{attrs:{id:"属性：-property、-synthesize、-dynamic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性：-property、-synthesize、-dynamic"}},[t._v("#")]),t._v(" 属性：@property、@synthesize、@dynamic")]),t._v(" "),s("p",[s("code",[t._v("@property")]),t._v("、"),s("code",[t._v("@synthesize")]),t._v("、"),s("code",[t._v("@dynamic")]),t._v("都是编译语义。")]),t._v(" "),s("h2",{attrs:{id:"property-的本质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#property-的本质"}},[t._v("#")]),t._v(" @property 的本质")]),t._v(" "),s("p",[t._v("property 的本质是 ivar + getter + setter。")]),t._v(" "),s("ul",[s("li",[t._v("ivar 存在于 ivar_list")]),t._v(" "),s("li",[t._v("method_list 存在于 method_list")]),t._v(" "),s("li",[t._v("property 以 property_t 的形式存在于 prop_list 中")])]),t._v(" "),s("p",[s("code",[t._v("property_t")]),t._v("的结构如下：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" property_t "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("attributes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("其中 attributes 字段包含的信息包括：类型、原子性、内存语义，以及对应的实例变量。")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("attributes")]),t._v("貌似不包含 getter、setter 信息；换句话说，实际上，property 和 getter/setter 是解耦的。另外，我总觉得，"),s("code",[t._v("property_t")]),t._v("的存在是为编译器服务的，在运行时它对运行逻辑没啥影响。")])]),t._v(" "),s("h2",{attrs:{id:"自动合成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动合成"}},[t._v("#")]),t._v(" 自动合成")]),t._v(" "),s("p",[t._v("完成属性定义后，编译器会自动编写访问这些属性所需的方法，以及实例变量。")]),t._v(" "),s("ul",[s("li",[t._v("自动合成不会发生在 category 中")]),t._v(" "),s("li",[t._v("当完全重写了 accessor，自动合成就不会发生\n"),s("ul",[s("li",[t._v("这是个人的理解")]),t._v(" "),s("li",[t._v("所谓完全重写，指的是：对 readwrite 属性同时重写 getter 和 setter；对 readonly 属性重写 getter")])])])]),t._v(" "),s("h2",{attrs:{id:"synthesize"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synthesize"}},[t._v("#")]),t._v(" @synthesize")]),t._v(" "),s("p",[t._v("作用：告诉编译器为属性自动合成实例变量、getter 和 setter；Xcode 默认提供了。")]),t._v(" "),s("blockquote",[s("p",[t._v("如上所述：编译器没有为 category 的属性提供该默认服务。")])]),t._v(" "),s("p",[t._v("如下使用场景中，也得使用到它：")]),t._v(" "),s("ul",[s("li",[t._v("自定义属性对应的变量名（不使用默认方案：属性名前加"),s("code",[t._v("_")]),t._v("）")]),t._v(" "),s("li",[t._v("同时重写了 readwrite 属性的 getter 和 setter")]),t._v(" "),s("li",[t._v("重写了 readonly 属性的 getter")]),t._v(" "),s("li",[t._v("属性在 protocol 中被声明")]),t._v(" "),s("li",[t._v("重载了父类的属性\n"),s("ul",[s("li",[t._v("父类已经有 setter、getter，编译器不会自动合成")]),t._v(" "),s("li",[t._v("此时只是让属性和实例变量给绑定起来")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("参考："),s("a",{attrs:{href:"https://stackoverflow.com/questions/19784454/when-should-i-use-synthesize-explicitly/19821816#19821816",target:"_blank",rel:"noopener noreferrer"}},[t._v("When Should I use synthesize explicitly"),s("OutboundLink")],1),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"dynamic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dynamic"}},[t._v("#")]),t._v(" @dynamic")]),t._v(" "),s("p",[t._v("告诉编译器不要自动创建 getter 和 setter。")]),t._v(" "),s("p",[t._v("对于 readwrite 属性而言，它告诉编译器不要自动合成 setter、getter；对于 readonly  属性而言，它告诉编译器不要自动合成 getter。")]),t._v(" "),s("h2",{attrs:{id:"相关问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关问题"}},[t._v("#")]),t._v(" 相关问题")]),t._v(" "),s("p",[t._v("Q: "),s("code",[t._v("@synthesize")]),t._v("和"),s("code",[t._v("@dynamic")]),t._v("能同时存在吗？")]),t._v(" "),s("p",[t._v("A: 不能。")]),t._v(" "),s("p",[t._v("Q: 对于协议中声明的属性，遵循该协议的类，需要额外补充"),s("code",[t._v("@synthesize")]),t._v("和"),s("code",[t._v("@dynamic")]),t._v("吗？")]),t._v(" "),s("p",[t._v("A: 需要额外补充"),s("code",[t._v("@synthesize")]),t._v("，譬如"),s("code",[t._v("@synthesize name;")])]),t._v(" "),s("p",[t._v("Q: 对于继承而来的属性，如果重新声明了，需要额外使用"),s("code",[t._v("@synthesize")]),t._v("和"),s("code",[t._v("@dynamic")]),t._v("吗？")]),t._v(" "),s("p",[t._v("A: 需要，但是使用"),s("code",[t._v("@synthesize")]),t._v("，还是"),s("code",[t._v("@dynamic")]),t._v("，要看自己的选择了。")]),t._v(" "),s("p",[t._v("Q: 如果使用了"),s("code",[t._v("@dynamic")]),t._v("，还会生成实例变量吗？")]),t._v(" "),s("p",[t._v("A: 不会，使用"),s("code",[t._v("@dynamic")]),t._v("有些类似于重写 accessor，自动合成不会发生，当然也就不会生成 ivar。")]),t._v(" "),s("h1",{attrs:{id:"nsinvocation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nsinvocation"}},[t._v("#")]),t._v(" NSInvocation")]),t._v(" "),s("p",[s("code",[t._v("NSInvocation")]),t._v("将方法调用对象化了，"),s("code",[t._v("NSInvocation")]),t._v("的调用方式的底层还是会使用到"),s("code",[t._v("objc_msgSend")]),t._v("的，但是具备更强的校验：")]),t._v(" "),s("ul",[s("li",[t._v("可根据"),s("code",[t._v("methodSignature.getArgumentTypeAtIndex:")]),t._v("，对参数进行正确处理")]),t._v(" "),s("li",[t._v("可根据"),s("code",[t._v("methodSignature.returnType")]),t._v("，对返回值进行正确处理")])]),t._v(" "),s("p",[s("code",[t._v("objc_msgSend")]),t._v("存在各种强转，在处理数据类型时容易出错。")]),t._v(" "),s("p",[t._v("但是通过一些方法签名和返回值类型校验，可以解决很多类型规范相关的问题。")]),t._v(" "),s("p",[s("code",[t._v("NSInvocation#setReturnValue")]),t._v("有什么用？一般在"),s("code",[t._v("forwardInvocation:")]),t._v("里使用。")]),t._v(" "),s("blockquote",[s("p",[t._v("参考董尚先的"),s("a",{attrs:{href:"https://km.sankuai.com/page/37519813",target:"_blank",rel:"noopener noreferrer"}},[t._v("外卖-组件通信方案WMScheduler"),s("OutboundLink")],1),t._v("。")])]),t._v(" "),s("h1",{attrs:{id:"performselector"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#performselector"}},[t._v("#")]),t._v(" performSelector")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("performSelector:")]),t._v("往往会遇到「PerformSelector may cause a leak because its selector is unknown」警告。")]),t._v(" "),s("p",[t._v("为什么使用 performSelector 总会出现 leak 警告？大概意思是编译器不知道如何处理返回值。")]),t._v(" "),s("p",[t._v("原因和解决方案可以参考这个：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://blog.csdn.net/dlmlzz09/article/details/54310739",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/dlmlzz09/article/details/54310739"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://stackoverflow.com/questions/7017281/performselector-may-cause-a-leak-because-its-selector-is-unknown",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://stackoverflow.com/questions/7017281/performselector-may-cause-a-leak-because-its-selector-is-unknown"),s("OutboundLink")],1)])]),t._v(" "),s("p",[s("code",[t._v("performSelector:")]),t._v("的一些其他局限性：")]),t._v(" "),s("ul",[s("li",[t._v("最多只能传递俩参")])]),t._v(" "),s("h1",{attrs:{id:"load-方法-initialize"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#load-方法-initialize"}},[t._v("#")]),t._v(" +load 方法 && +initialize")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://zhangbuhuai.com/post/runtime.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://zhangbuhuai.com/post/runtime.html"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("code",[t._v("+load")]),t._v("方法的调用顺序：")]),t._v(" "),s("ul",[s("li",[t._v("父类早于子类")]),t._v(" "),s("li",[t._v("主类早于分类")])]),t._v(" "),s("blockquote",[s("p",[t._v("后面一句，不仅意味着"),s("code",[t._v("Son")]),t._v("的"),s("code",[t._v("+load")]),t._v("早于"),s("code",[t._v("Son(Category)")]),t._v("的"),s("code",[t._v("+load")]),t._v("，同样意味着"),s("code",[t._v("Son")]),t._v("的"),s("code",[t._v("+load")]),t._v("早于"),s("code",[t._v("Father(Category)")]),t._v("的"),s("code",[t._v("+load")]),t._v("。")])]),t._v(" "),s("p",[t._v("对于"),s("code",[t._v("+initialize")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("程序向一个类或者它的子类第一次发消息的时候，runtime 会向该类发送 initialize 消息")]),t._v(" "),s("li",[t._v("父类早于子类")]),t._v(" "),s("li",[t._v("如果子类没有定义，会调用父类的"),s("code",[t._v("+initialize")])]),t._v(" "),s("li",[t._v("如果在"),s("code",[t._v("category")]),t._v("中重写了"),s("code",[t._v("initialize")]),t._v("方法，则会覆盖主类的"),s("code",[t._v("+initialize")])]),t._v(" "),s("li",[s("code",[t._v("+initialize")]),t._v("的调用是线程安全的（不晓得是如何保证的）")])]),t._v(" "),s("p",[t._v("针对第三点，如果当前类没有实现"),s("code",[t._v("+initializie")]),t._v("，则会调用 SuperClass 的"),s("code",[t._v("+initialize")]),t._v("，所以会出现一个"),s("code",[t._v("+initialize")]),t._v("的实现被多次调用的情况，为了避免这种情况，可以采用如下写法：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("initialize "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ClassName "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... do the initialization ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h1",{attrs:{id:"method-swizzle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method-swizzle"}},[t._v("#")]),t._v(" Method Swizzle")]),t._v(" "),s("h2",{attrs:{id:"method-swizzle-有那些坑？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method-swizzle-有那些坑？"}},[t._v("#")]),t._v(" Method Swizzle 有那些坑？")]),t._v(" "),s("p",[t._v("参考"),s("a",{attrs:{href:"https://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c",target:"_blank",rel:"noopener noreferrer"}},[t._v("What are the Dangers of Method Swizzling in Objective C?"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[t._v("不是原子的\n"),s("ul",[s("li",[t._v("放在"),s("code",[t._v("+load")]),t._v("就可以解决问题")])])]),t._v(" "),s("li",[t._v("命名问题\n"),s("ul",[s("li",[t._v("譬如"),s("code",[t._v("_cmd")]),t._v("被篡改")])])]),t._v(" "),s("li",[t._v("顺序问题\n"),s("ul",[s("li",[t._v("某条调用链断了")])])]),t._v(" "),s("li",[t._v("难以调试")]),t._v(" "),s("li",[t._v("难以理解")])]),t._v(" "),s("blockquote",[s("p",[t._v("参考："),s("a",{attrs:{href:"http://yulingtianxia.com/blog/2017/04/17/Objective-C-Method-Swizzling/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Objective-C Method Swizzling"),s("OutboundLink")],1),t._v("。")])]),t._v(" "),s("h1",{attrs:{id:"消息转发机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息转发机制"}},[t._v("#")]),t._v(" 消息转发机制")]),t._v(" "),s("p",[s("router-link",{attrs:{to:"/post/message-forwarding.html"}},[t._v("NSObject 的消息转发机制")])],1),t._v(" "),s("p",[s("a",{attrs:{href:"http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"http://yulingtianxia.com/blog/2018/03/31/Track-Block-Arguments-of-Objective-C-Method/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://yulingtianxia.com/blog/2018/03/31/Track-Block-Arguments-of-Objective-C-Method/"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"resolveinstancemethod-的应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#resolveinstancemethod-的应用场景"}},[t._v("#")]),t._v(" +resolveInstanceMethod: 的应用场景")]),t._v(" "),s("p",[t._v("添加 getter 和 setter。")]),t._v(" "),s("h2",{attrs:{id:"forwardingtargetforselector-的应用场景？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#forwardingtargetforselector-的应用场景？"}},[t._v("#")]),t._v(" -forwardingTargetForSelector: 的应用场景？")]),t._v(" "),s("p",[t._v("将消息转发出去，基于代理实现类似于多重继承。")]),t._v(" "),s("h2",{attrs:{id:"forwardinvocation-的应用场景？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#forwardinvocation-的应用场景？"}},[t._v("#")]),t._v(" -forwardInvocation: 的应用场景？")]),t._v(" "),s("ul",[s("li",[t._v("实现可以接收任何消息的"),s("code",[t._v("NSNull")])]),t._v(" "),s("li",[t._v("实现一个广播器，将收到的消息广播给各个 delegate")])]),t._v(" "),s("h1",{attrs:{id:"几道神经病院题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#几道神经病院题目"}},[t._v("#")]),t._v(" 几道神经病院题目")]),t._v(" "),s("p",[t._v("题目一：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("init "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" init"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%@"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSStringFromClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%@"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSStringFromClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("题目二：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[t._v("BOOL res1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSObject class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" isKindOfClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSObject class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nBOOL res2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSObject class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" isMemberOfClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSObject class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nBOOL res3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Sark class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" isKindOfClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Sark class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nBOOL res4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Sark class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" isMemberOfClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Sark class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("正确回答这个问题需要这倒这么前提知识："),s("code",[t._v("NSObject.class")]),t._v("的实现、"),s("code",[t._v("isMemberOf:")]),t._v("、"),s("code",[t._v("isKindOf:")]),t._v("的实现，以及如下这张图：")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://www.sealiesoftware.com/blog/class%20diagram.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.sealiesoftware.com/blog/class diagram.pdf"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("题目三：")]),t._v(" "),s("p",[t._v("下面的代码会？Compile Error / Runtime Crash / NSLog ... ?")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" NSObject "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Sark"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" NSObject "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Sark"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("foo "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"IMP: -[NSObject(Sark) foo]"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("autoreleasepool "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSObject foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSObject new"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("又是一个我回答不了的问题...")]),t._v(" "),s("p",[t._v("第四题：第四题太长了，不了解也罢。")]),t._v(" "),s("h1",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),s("h2",{attrs:{id:"为什么说-objective-c-是一门动态语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么说-objective-c-是一门动态语言"}},[t._v("#")]),t._v(" 为什么说 Objective-C 是一门动态语言")]),t._v(" "),s("p",[t._v("即兴胡诌...")]),t._v(" "),s("p",[t._v("可以从对象是什么？对象能干什么？各个方面来表达。")]),t._v(" "),s("ul",[s("li",[t._v("对象类型的确定，在运行时才知道的（静态语言，在编译期就知道）")]),t._v(" "),s("li",[t._v("对象方法的调用逻辑，也是在运行时才知道的（静态语言，在编译期就知道）")])]),t._v(" "),s("h2",{attrs:{id:"tagged-pointer-了解一下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tagged-pointer-了解一下"}},[t._v("#")]),t._v(" Tagged Pointer 了解一下")]),t._v(" "),s("p",[t._v("参考"),s("a",{attrs:{href:"https://www.jianshu.com/p/dcbf48a733f9",target:"_blank",rel:"noopener noreferrer"}},[t._v("Objective-C 对象的 TaggedPointer 特性"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("Tagged Pointer 的引用主要解决内存浪费和访问效率的问题。所以其有以下特点：")]),t._v(" "),s("ul",[s("li",[t._v("Tagged Pointer 专门用于存储小的对象，例如：NSString、NSNumber 和 NSDate。")]),t._v(" "),s("li",[t._v("Tagged Pointer指针的值不再是堆区地址，而是真正的值。所以，实际上它不再是一个对象了，它只是一个披着对象皮的普通变量而已。所以，它的内存并不存储在堆中，也不需要 malloc 和 free。")]),t._v(" "),s("li",[t._v("在内存读取上有着 3 倍的效率，创建时比以前快 106 倍。")])]),t._v(" "),s("p",[t._v("如此可见，Apple 引入了 Tagged Pointer 不仅仅节省了64位处理器的占用内存空间，还提高了运行效率。")]),t._v(" "),s("h2",{attrs:{id:"atomic-有什么线程不安全的地方？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#atomic-有什么线程不安全的地方？"}},[t._v("#")]),t._v(" atomic 有什么线程不安全的地方？")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("competition "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("intSource "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_async")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("intSource "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("intSource "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch_async")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("intSource "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("intSource "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("如上，得到的很可能就不是 2000。因为它只保证 getter 和 setter 的原子性，并不能保证真正赋值的原子性。")]),t._v(" "),s("p",[t._v("原因不难想...")])],1)}),[],!1,null,null,null);a.default=n.exports}}]);