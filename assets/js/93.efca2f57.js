(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{161:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"pragma-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pragma-介绍"}},[t._v("#")]),t._v(" #pragma 介绍")]),t._v(" "),s("p",[s("code",[t._v("#pragma")]),t._v("是一个预处理指令，pragma 的中文意思是『编译指示』。它不是 Objective-C 中独有的东西（貌似在 C/C++中使用比较多），最开始的设计初衷是为了保证代码在不同编译器之间的兼容性，但随着时间推移，它出现在了更多更丰富的应用场景中。")]),t._v(" "),s("p",[s("code",[t._v("#pragma")]),t._v("代码是在编译期间处理的；它既不属于注释，也不属于逻辑代码的一部分；并且它和其他预处理命令譬如"),s("code",[t._v("#ifdef ... #endif")]),t._v("不同，它不会影响代码在运行时的逻辑处理，所以"),s("code",[t._v("#pragma")]),t._v("指令丝毫不会影响到程序在运行时的性能。根据 Mattt Thompson 大神的描述，在当前 Xcode 开发环境中，"),s("code",[t._v("#pragma")]),t._v("主要有两个应用场景：组织代码和屏蔽编译警告。")]),t._v(" "),s("h2",{attrs:{id:"pragma-mark-组织代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pragma-mark-组织代码"}},[t._v("#")]),t._v(" #pragma mark 组织代码")]),t._v(" "),s("p",[t._v("组织代码是个人卫生问题，个人卫生不好（代码组织不好）不能反映人品（技术能力），但它在某种程度中影响了别人是否愿意和他搞基（合作）。在一个项目（尤其是多人合作的项目）中，应该有一个比较好的内部一致性编码习惯，不好的习惯或者缺乏一致性，会使得项目难以维持，协作也不便（这点笔者深有体会，笔者目前的项目有一个同事，编码能力尚可，但编码习惯实在太糟糕，代码紧凑，从来不空格，更妄谈空行和注释了，甚至经常不对齐，看他的代码，一点修改的欲望都没有，想的只是自己重写一遍=_=）。")]),t._v(" "),s("p",[t._v("在组织代码时充分使用"),s("code",[t._v("#pragma mark")]),t._v("就是写出『干净代码』的一个重要环节，就像这样：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("pragma")]),t._v(" mark - UIViewController")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("viewDidLoad "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" viewDidLoad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("dealloc "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("pragma")]),t._v(" mark - IBAction")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IBAction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("loginNow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("sender "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("pragma")]),t._v(" mark - UITableViewDataSource")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSInteger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("tableView"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UITableView "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("tableView numberOfRowsInSection"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSInteger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("section "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("pragma")]),t._v(" mark - UITableViewDelegate")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("tableView"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UITableView "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("tableView didSelectRowAtIndexPath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSIndexPath "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("indexPath "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上述代码中使用"),s("code",[t._v("#pragma mark")]),t._v("将@implementation 中的代码（方法）分成了几个逻辑 section，这种处理并没有改变程序逻辑，但我们在使用 Xcode 代码导航工具时可以在视觉上汲取片刻的欢愉：")]),t._v(" "),s("e-img",{attrs:{src:"/image/using-pragma.png",alt:"使用代码导航器"}}),t._v(" "),s("p",[t._v("组织 N 个方法为一个 section 的依据是什么呢？这个就见仁见智了。一般来说：")]),t._v(" "),s("ul",[s("li",[t._v("将一个 protocol 的方法组织成一个 section；")]),t._v(" "),s("li",[t._v("将 target-action 类型方法组织成一个 section；")]),t._v(" "),s("li",[t._v("将 notification 相关方法组织成一个 section；")]),t._v(" "),s("li",[t._v("将需要 override 的父类方法组成成一个 section；")])]),t._v(" "),s("h2",{attrs:{id:"pragma-屏蔽编译警告"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pragma-屏蔽编译警告"}},[t._v("#")]),t._v(" #pragma 屏蔽编译警告")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("#pragma mark")]),t._v("来组织代码使用比较普遍，相对而言，使用"),s("code",[t._v("#pragma")]),t._v("指令屏蔽编译器和静态分析器的警告相对来说就比较新鲜了。")]),t._v(" "),s("p",[t._v("You know what is even more annoying than poorly-formatted code? Code that generates warnings. 编译警告很可恶，应该尽可能修改代码干掉这些警告，但是有些时候有些警告无法避免，譬如我们在编写"),s("code",[t._v("@selector(aMethodName)")]),t._v("这样的代码时，如果 aMethodName 没有在上下文中出现，可能会出现含有『undeclared-selector』关键词的 warning，有洁癖的程序员会想到干掉这个 warning，此时"),s("code",[t._v("#pragma")]),t._v("指令就派上用场了。譬如：")]),t._v(" "),s("div",{staticClass:"language-objectivec extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("pragma")]),t._v(" clang diagnostic push")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("pragma")]),t._v(' clang diagnostic ignored "-Wundeclared-selector"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("selectedViewController respondsToSelector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isReadyForEditing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        boolNumber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("selectedViewController performSelector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isReadyForEditing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("pragma")]),t._v(" clang diagnostic pop")]),t._v("\n")])])]),s("p",[t._v("这是 Clang 编译器提供的一种解决方案，通过使用"),s("code",[t._v("#pragma clang diagnostic push/pop")]),t._v("来告诉编译器仅仅为某一特定部分代码（记得要在代码片段末尾使用 pop 将最初的 diagnostic 设置恢复哦）忽视特定警告。")]),t._v(" "),s("p",[t._v("上述示例中"),s("code",[t._v("#pragma clang diagnostic ignored")]),t._v("后面的"),s("code",[t._v('"-Wundeclared-selector"')]),t._v("指示的是『特定警告』，再别的应用场景中肿么知道该填写什么呢？网络是强大的，有一个（可能是 N 个）愤怒的网友对 clang 警告消息做了一个总结，之所以说这个网友“愤怒”，是因为其链接非常有意思：http://fuckingclangwarnings.com/。")]),t._v(" "),s("p",[t._v("Finally, you can read more about the LLVM's use of #pragma in the "),s("a",{attrs:{href:"http://clang.llvm.org/docs/UsersManual.html#diagnostics_pragmas",target:"_blank",rel:"noopener noreferrer"}},[t._v("Clang Compiler User's Manual"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("最后，感谢大神 Mattt Thompson，本文的参考资料完全来自于《"),s("a",{attrs:{href:"http://nshipster.com/pragma/",target:"_blank",rel:"noopener noreferrer"}},[t._v("#pragma"),s("OutboundLink")],1),t._v("》，本来想用自己的语言完成这篇博客，边读边写，最后发现几乎差不多了，没留下啥自己的东西，就这样吧！")]),t._v(" "),s("h2",{attrs:{id:"本文参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本文参考"}},[t._v("#")]),t._v(" 本文参考")]),t._v(" "),s("ul",[s("li",[t._v("《"),s("a",{attrs:{href:"http://nshipster.com/pragma/",target:"_blank",rel:"noopener noreferrer"}},[t._v("#pragma"),s("OutboundLink")],1),t._v("》")]),t._v(" "),s("li",[t._v("《"),s("a",{attrs:{href:"http://nshipster.com/clang-diagnostics/",target:"_blank",rel:"noopener noreferrer"}},[t._v("clang diagnostics"),s("OutboundLink")],1),t._v("》")])])],1)}),[],!1,null,null,null);a.default=e.exports}}]);