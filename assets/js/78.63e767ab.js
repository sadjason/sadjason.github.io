(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{112:function(t,a,e){"use strict";e.r(a);var s=e(0),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("本文以《深入理解计算机系统》第七章「链接」为纲，以《程序员的自我修养》为主要参考，以 Mach-O 文件为研究对象，旨在整理静态链接相关的知识。")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#概述"}},[t._v("概述")]),e("ul",[e("li",[e("a",{attrs:{href:"#符号-模块"}},[t._v("符号 & 模块")])]),e("li",[e("a",{attrs:{href:"#静态链接"}},[t._v("静态链接")])]),e("li",[e("a",{attrs:{href:"#rip-relative-寻址"}},[t._v("RIP-relative 寻址")])])])]),e("li",[e("a",{attrs:{href:"#中间文件的符号分析"}},[t._v("中间文件的符号分析")]),e("ul",[e("li",[e("a",{attrs:{href:"#relocation-symbol-table"}},[t._v("Relocation Symbol Table")])]),e("li",[e("a",{attrs:{href:"#symbol-table"}},[t._v("Symbol Table")])])])]),e("li",[e("a",{attrs:{href:"#可执行文件的符号分析"}},[t._v("可执行文件的符号分析")])])])]),e("p"),t._v(" "),e("blockquote",[e("p",[t._v("下一篇"),e("router-link",{attrs:{to:"/post/macho-dynamic-link.html"}},[t._v("Mach-O 与动态链接")]),t._v("分析 Mach-O 动态链接相关内容。")],1)]),t._v(" "),e("h1",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),e("p",[t._v("本文的核心主题是静态链接，这一部分会对静态链接的内容做一个概述；在介绍链接之前，有必要先理清两个基本概念：符号、模块。")]),t._v(" "),e("h2",{attrs:{id:"符号-模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#符号-模块"}},[t._v("#")]),t._v(" 符号 & 模块")]),t._v(" "),e("p",[t._v("先说符号（symbol）。计算机世界里的符号概念起源于汇编，在汇编之前，远古大神的代码都是机器代码，机器代码充满了各种各样的数值，这些数值描述着指令、操作数、地址值；可以想到，全是数值的机器代码可读性非常糟糕；对于地址值而言，当程序变更时，地址值就得重新计算，这种操作实在过于黑暗，于是先驱者发明了汇编语言，使用符号来帮助记忆，如下：")]),t._v(" "),e("div",{staticClass:"language-asm6502 extra-class"},[e("pre",{pre:!0,attrs:{class:"language-asm6502"}},[e("code",[e("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("jmp")]),t._v(" foo\nfoo:\n  addl $"),e("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("4")]),t._v(", %ecx\n")])])]),e("p",[e("code",[t._v("jmp")]),t._v("符号表示跳转指令，"),e("code",[t._v("foo")]),t._v("符号描述子程序的地址；无论"),e("code",[t._v("foo")]),t._v("前插入还是减少了代码，程序员无需关心它的具体地址值，汇编器在汇编时会自动计算，极大解放生产力。")]),t._v(" "),e("p",[t._v("对于表示地址值的符号而言，可以把它理解为键值对，符号是 key，地址值是 value。在之后的计算机发展中，「符号」表达的意思基本上没有变化。")]),t._v(" "),e("p",[t._v("再说模块。稍有规模的现代项目源码，常被按照功能或性质进行划分，分别形成不同的功能模块，不同的模块之间按照层级结构或其他结构来组织。譬如，在 C 语言，若干个变量和函数组成一个模块，存放在一个"),e("code",[t._v(".c")]),t._v("的源码文件中，然后这些源代码文件按照目录结构来组织。")]),t._v(" "),e("blockquote",[e("p",[t._v("对于 Objective-C 项目，每个"),e("code",[t._v(".m")]),t._v("或者"),e("code",[t._v(".mm")]),t._v("文件构成一个模块。")])]),t._v(" "),e("p",[t._v("大规模软件往往拥有成千上万个模块，这些模块相互依赖又相互独立。软件模块化有很多好处，譬如更易理解、重用等；对于编译器而言，其好处是每个模块可以单独编译，改变部分代码无需重新编译整个程序。")]),t._v(" "),e("p",[t._v("当一个程序被切割成多个模块后，现代编译器会对每个模块进行单独编译，为每一个模块生成中间文件。这些中间文件终究会被组合形成一个单一的可执行文件。")]),t._v(" "),e("p",[t._v("将程序各个模块的中间文件组合形成一个单一的可执行文件并不是一件容易的事情，因为模块间往往会互相依赖，或者说它们之间存在通信。因此，从编译器的角度看，模块之间如何组合的问题可以归结为处理模块间通信的问题。对于静态语言 C/C++ 而言，模块间的通信方式有两种：一种是模块间的函数调用，另外一种是模块间的变量访问；函数访问需知道目标函数的地址，变量访问也须知道目标变量的地址，所以这两种方式都可以归结为一种方式：模块间符号的引用。")]),t._v(" "),e("h2",{attrs:{id:"静态链接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态链接"}},[t._v("#")]),t._v(" 静态链接")]),t._v(" "),e("p",[t._v("上文铺垫了符号和模块的概念，现在来说说静态链接。所谓静态链接，其本质是把程序各个模块的中间文件粘在一起，拼装成一个整体；换句话说，以模块的中间文件为输入，产生一个新的 Mach-O 文件（往往是可执行文件）。链接的主要内容就是把各个模块之间相互引用的部分都处理好，使得各个模块之间能够正确地衔接，从原理上讲，即把一些指令对其他符号地址的引用加以修正。按照《程序员的自我修养》的说法，静态链接主要过程包括：")]),t._v(" "),e("ul",[e("li",[t._v("地址和空间分配（Address and Storage Allocation）")]),t._v(" "),e("li",[t._v("符号决议（Symbol Resolution）")]),t._v(" "),e("li",[t._v("重定位（Relocation）")])]),t._v(" "),e("p",[t._v("其中最核心也最值得拧出来分析的是「重定位」过程。静态链接的重定位是围绕符号进行的，私以为，搞清楚了 Mach-O 文件中的符号，也就搞清楚了静态链接。")]),t._v(" "),e("p",[t._v("接下来的重心是对中间文件以及可执行文件的符号进行分析。")]),t._v(" "),e("h2",{attrs:{id:"rip-relative-寻址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rip-relative-寻址"}},[t._v("#")]),t._v(" RIP-relative 寻址")]),t._v(" "),e("p",[t._v("本文所在环境的系统架构是 x86-64，很多指令的寻址方式是 RIP-relative 寻址。虽然笔者对汇编不甚熟悉，但是为了后续分析和阅读方便，还是得花些笔墨整理一下 RIP-relative 寻址相关内容。")]),t._v(" "),e("blockquote",[e("p",[t._v("RIP 的全拼是：Relative Instruction Pointer")])]),t._v(" "),e("p",[t._v("按照笔者的粗浅理解，基于 RIP 计算目标地址时，目标地址等于当前指令的下一条指令所在地址加上偏移量。简单来说，若看到如下二进制的反汇编内容：")]),t._v(" "),e("div",{staticClass:"language-asm6502 extra-class"},[e("pre",{pre:!0,attrs:{class:"language-asm6502"}},[e("code",[e("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0000000000001")]),t._v("fcd  jmpq  "),e("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token register variable"}},[t._v("x")]),e("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("2")]),t._v("d(%rip)\n"),e("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("0000000000001")]),t._v("fd"),e("span",{pre:!0,attrs:{class:"token decimalnumber string"}},[t._v("3")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token opcode property"}},[t._v("nop")]),t._v("\n")])])]),e("p",[t._v("则第一行代码 jmpq 的跳转目标地址是：0x1fd3 + 0x2d = 0x2000。")]),t._v(" "),e("p",[t._v("关于RIP-relative 的更多内容可参考：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://blog.csdn.net/yeshahayes/article/details/51930610",target:"_blank",rel:"noopener noreferrer"}},[t._v("64位下的相对指令地址"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://xem.github.io/minix86/manual/intel-x86-and-64-manual-vol2/o_b5573232dd8f1481-72.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Intel x86-64 Manual Vol2"),e("OutboundLink")],1)])]),t._v(" "),e("h1",{attrs:{id:"中间文件的符号分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#中间文件的符号分析"}},[t._v("#")]),t._v(" 中间文件的符号分析")]),t._v(" "),e("p",[t._v("Mach-O 的文件类型有很多种（详见"),e("a",{attrs:{href:"https://opensource.apple.com/source/xnu/xnu-4903.221.2/EXTERNAL_HEADERS/mach-o/loader.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("mach-o/loader.h"),e("OutboundLink")],1),t._v(" 里以"),e("code",[t._v("MH_")]),t._v("为前缀的 type 宏），常见的有：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("MH_OBJECT")]),t._v(": 中间文件")]),t._v(" "),e("li",[e("code",[t._v("MH_EXECUTE")]),t._v(": 可执行文件")])]),t._v(" "),e("blockquote",[e("p",[t._v("曾在"),e("router-link",{attrs:{to:"/post/macho-structure.html"}},[t._v("Mach-O 简单分析")]),t._v("中分析了 Mach-O 文件的结构，相关内容不再赘述。")],1)]),t._v(" "),e("p",[t._v("上文多处提到「中间文件」，它其实就是一种"),e("code",[t._v("MH_OBJECT")]),t._v("类型的 Mach-O 文件，还常被称作「中间目标文件」「可重定位文件」，通常以"),e("code",[t._v(".o")]),t._v("为后缀，")]),t._v(" "),e("p",[t._v("这一部分重点分析中间文件与符号相关的结构。将使用下面两个源代码文件 a.c 和 b.c 作为例子展开分析：")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* a.c */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" shared"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("shared"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* b.c */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" shared "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("从代码中可以看到，"),e("code",[t._v("b.c")]),t._v("总共定义了两个全局符号，一个是变量"),e("code",[t._v("shared")]),t._v("，另外一个是函数"),e("code",[t._v("swap")]),t._v("；"),e("code",[t._v("a.c")]),t._v("里面定义了一个全局符号"),e("code",[t._v("main")]),t._v("；后者引用了前者的俩符号。")]),t._v(" "),e("p",[t._v("使用 gcc 将这俩文件分别编译成目标文件 a.o 和 b.o :")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ gcc -c a.c b.c\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成 a.o 和 b.o")]),t._v("\n")])])]),e("p",[t._v("先看看"),e("code",[t._v("a.o")]),t._v("的 __TEXT __text 的反汇编内容：")]),t._v(" "),e("e-img",{attrs:{src:"/image/a_o_machoview.png"}}),t._v(" "),e("blockquote",[e("p",[t._v("本文对 Mach-O 文件的查看主要使用 MachOView 工具。")])]),t._v(" "),e("p",[t._v("图中使用红框标记了"),e("code",[t._v("a.o")]),t._v("中的两处符号引用，分别对应 movq 操作和 callq 操作：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("48 8B35 00000000")]),t._v(": 其中"),e("code",[t._v("48")]),t._v("是 movq 的操作码，"),e("code",[t._v("00000000")]),t._v("描述"),e("code",[t._v("_shared")]),t._v("的符号值（地址值）")]),t._v(" "),e("li",[e("code",[t._v("E8 00000000")]),t._v(": 其中"),e("code",[t._v("E8")]),t._v("是 callq 的的操作码，"),e("code",[t._v("00000000")]),t._v("描述"),e("code",[t._v("_swap")]),t._v("的符号值（地址值）")])]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("gcc")]),t._v("编译器中的符号名，通常都含有"),e("code",[t._v("_")]),t._v("前缀。")])]),t._v(" "),e("p",[t._v("可以看到，在"),e("code",[t._v("a.o")]),t._v("的代码段，该符号对应的地址值都被置为"),e("code",[t._v("0")]),t._v("。")]),t._v(" "),e("p",[t._v("问题来了，编译器对中间文件进行链接时，如何知道该对哪些指令进行地址调整呢？这些指令的哪些部分要被调整呢？又该如何调整呢？")]),t._v(" "),e("p",[t._v("Relocation Symbol Table 正是解决这个问题的。")]),t._v(" "),e("h2",{attrs:{id:"relocation-symbol-table"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#relocation-symbol-table"}},[t._v("#")]),t._v(" Relocation Symbol Table")]),t._v(" "),e("p",[t._v("在每个可重定位的 Mach-O 文件中，有一个叫重定位（Relocation）的区域，专门用来保存这些和重定位相关的信息。")]),t._v(" "),e("p",[t._v("某个 section 如果内含需要被重定位的字节，就会有一个 relocation table 与此对应：")]),t._v(" "),e("e-img",{attrs:{src:"/image/a_o_relocation_table.png"}}),t._v(" "),e("p",[t._v("在"),e("router-link",{attrs:{to:"/post/macho-structure.html"}},[t._v("Mach-O 简单分析")]),t._v("里介绍过 section 的结构（相关结构体定义于"),e("a",{attrs:{href:"https://opensource.apple.com/source/xnu/xnu-4903.221.2/EXTERNAL_HEADERS/mach-o/loader.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("mach-o/loader.h"),e("OutboundLink")],1),t._v("中的 section_64），其中有两个字段描述了其对应的relocation table：")],1),t._v(" "),e("ul",[e("li",[e("code",[t._v("reloff")]),t._v(": relocation table 的 file offset")]),t._v(" "),e("li",[e("code",[t._v("nreloc")]),t._v(": relocation table 的 entry 数量")])]),t._v(" "),e("p",[t._v("Relocation table可以看作是一个 relocation entry 的数组，每个 relocation entry 占 8 个字节：")]),t._v(" "),e("e-img",{attrs:{src:"/image/a_o_relocation_entries.png"}}),t._v(" "),e("p",[t._v("对应结构体是"),e("a",{attrs:{href:"https://opensource.apple.com/source/xnu/xnu-4903.221.2/EXTERNAL_HEADERS/mach-o/reloc.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("relocation_info"),e("OutboundLink")],1),t._v(":")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("relocation_info")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    int32_t   r_address"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* offset in the section to what is being relocated */")]),t._v("\n    uint32_t  r_symbolnum"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* symbol index if r_extern == 1 or section ordinal if r_extern == 0 */")]),t._v("\n              r_pcrel"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* was relocated pc relative already */")]),t._v("\n              r_length"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 0=byte, 1=word, 2=long, 3=quad */")]),t._v("\n              r_extern"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* does not include value of sym referenced */")]),t._v("\n              r_type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* if not 0, machine specific relocation type */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("对这几个字段稍作说明：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("r_address")]),t._v("和"),e("code",[t._v("r_length")]),t._v("字段描述了需要被 relocation 的字节范围，其中"),e("code",[t._v("r_address")]),t._v("是相对于 section 的偏移量")]),t._v(" "),e("li",[e("code",[t._v("r_pcrel")]),t._v("表示地址值是 PC 相对地址值")]),t._v(" "),e("li",[e("code",[t._v("r_extern")]),t._v("标记该符号是否是外部符号")]),t._v(" "),e("li",[e("code",[t._v("r_symbolnum")]),t._v("，index 值，对于外部符号，它描述了符号在 symbol table 中的位置；如果是内部符号，它描述了符号所在的 section 的index")]),t._v(" "),e("li",[e("code",[t._v("r_type")]),t._v("，符号类型")])]),t._v(" "),e("h2",{attrs:{id:"symbol-table"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#symbol-table"}},[t._v("#")]),t._v(" Symbol Table")]),t._v(" "),e("p",[t._v("从上文的"),e("code",[t._v("r_symbolnum")]),t._v("可以看出，"),e("code",[t._v("relocation_info")]),t._v("并未完整描述符号信息，它只是告诉链接器哪些指令需要调整地址。符号的具体信息（包括符号名等）在 symbol table 中：")]),t._v(" "),e("e-img",{attrs:{src:"/image/a_o_symbol_table.png"}}),t._v(" "),e("p",[t._v("Symbol table 由谁定义呢？或者说，链接器是如何找到 symbol table 的呢？链接器是通过 LC_SYMTAB 这个 load command 找到 symbol table 的，关于 load command，在"),e("router-link",{attrs:{to:"/post/macho-structure.html"}},[t._v("Mach-O 简单分析")]),t._v("里有过介绍，此处不再赘述；LC_SYMTAB 对应的 command 结构体如下：")],1),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("symtab_command")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    uint32_t cmd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LC_SYMTAB */")]),t._v("\n    uint32_t cmdsize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* sizeof(struct symtab_command) */")]),t._v("\n    uint32_t symoff"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* symbol table offset */")]),t._v("\n    uint32_t nsyms"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* number of symbol table entries */")]),t._v("\n    uint32_t stroff"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* string table offset */")]),t._v("\n    uint32_t strsize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* string table size in bytes */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("这个命令告诉了链接器（无论是本文所述的静态链接器，还是后面博客要提到的动态链接器） symbol table 和 string table 的位置信息；"),e("code",[t._v("symtab_command")]),t._v("这个结构体比较简单，"),e("code",[t._v("symoff")]),t._v("和"),e("code",[t._v("nsyms")]),t._v("指示了符号表的位置和条目，"),e("code",[t._v("stroff")]),t._v("和"),e("code",[t._v("strsize")]),t._v("指示了字符串表的位置和长度。")]),t._v(" "),e("p",[t._v("每个 symbol entry 长度是固定的，其结构由内核定义，详见"),e("a",{attrs:{href:"https://opensource.apple.com/source/xnu/xnu-4903.221.2/EXTERNAL_HEADERS/mach-o/nlist.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("nlist.h"),e("OutboundLink")],1),t._v("：")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("nlist_64")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        uint32_t n_strx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* index into the string table */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" n_un"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uint8_t  n_type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* type flag, see below */")]),t._v("\n    uint8_t  n_sect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* section number or NO_SECT */")]),t._v("\n    uint16_t n_desc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* see <mach-o/stab.h> */")]),t._v("\n    uint64_t n_value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* value of this symbol (or stab offset) */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("结构体"),e("code",[t._v("nlist_64")]),t._v("（或"),e("code",[t._v("nlist")]),t._v("）描述了符号的基本信息，xnu 用 5 个字段描述了symbol信息，其中"),e("code",[t._v("n_un")]),t._v("、"),e("code",[t._v("n_sect")]),t._v("、"),e("code",[t._v("n_value")]),t._v("比较容易理解：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("n_un")]),t._v("，符号的名字（在一个 Mach-O 文件里，具有唯一性）")]),t._v(" "),e("li",[e("code",[t._v("n_sect")]),t._v("，符号所在的 section index（内部符号有效值从 1 开始，最大为 255）")]),t._v(" "),e("li",[e("code",[t._v("n_value")]),t._v("，符号的地址值（在链接过程中，会随着其 section 发生变化）")])]),t._v(" "),e("p",[e("code",[t._v("n_type")]),t._v("和"),e("code",[t._v("n_desc")]),t._v("表达的意思稍微复杂点；都是多功能组合字段，其中，对于中间文件而言，"),e("code",[t._v("n_desc")]),t._v("没啥意义，此乃个人理解。如下关于"),e("code",[t._v("n_type")]),t._v("的信息也是我的个人梳理，主要参考"),e("a",{attrs:{href:"https://developer.apple.com/documentation/kernel/nlist_64/",target:"_blank",rel:"noopener noreferrer"}},[t._v("kernel/nlist_64"),e("OutboundLink")],1),t._v("和"),e("a",{attrs:{href:"https://opensource.apple.com/source/xnu/xnu-4903.221.2/EXTERNAL_HEADERS/mach-o/nlist.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("nlist.h"),e("OutboundLink")],1),t._v("。"),e("code",[t._v("n_type")]),t._v("是一个 8 bit 的复合字段：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("bit[5:8]")]),t._v(": 如果不为 0，表示这是一个与调试有关的符号，值意义类型详见"),e("a",{attrs:{href:"https://opensource.apple.com/source/xnu/xnu-4903.221.2/EXTERNAL_HEADERS/mach-o/stab.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("mach-o/stab.h"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("bit[4:5]")]),t._v(": 若为 1，则表示该符号是私有的（外部符号）")]),t._v(" "),e("li",[e("code",[t._v("bit[1:4]")]),t._v(": 符号类型\n"),e("ul",[e("li",[e("code",[t._v("N_UNDF")]),t._v(" (0x0): 未定义")]),t._v(" "),e("li",[e("code",[t._v("N_ABS")]),t._v(" (0x2): 符号地址指向到绝对地址，链接器后期不会再修改")]),t._v(" "),e("li",[e("code",[t._v("N_SECT")]),t._v(" (0xe): 本地符号，即符号定义于当前 Mach-O")]),t._v(" "),e("li",[e("code",[t._v("N_PBUD")]),t._v(" (0xc): 预绑定符号")]),t._v(" "),e("li",[e("code",[t._v("N_INDR")]),t._v(" (0xa): 表示该符号和另一个符号是同一个，"),e("code",[t._v("n_value")]),t._v("指向到 string table，即该同名符号的名字")])])]),t._v(" "),e("li",[e("code",[t._v("bit[0:1]")]),t._v(": 表示这是外部符号，即该符号要么定义在外部，要么定义在本地但是可以被外部使用")])]),t._v(" "),e("p",[t._v("有了 relocation table 和 symbol table，链接器就与足够的信息进行链接处理了。")]),t._v(" "),e("h1",{attrs:{id:"可执行文件的符号分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可执行文件的符号分析"}},[t._v("#")]),t._v(" 可执行文件的符号分析")]),t._v(" "),e("p",[t._v("先使用"),e("code",[t._v("ld")]),t._v("工具（静态链接器）对如上 a.o、b.o 进行链接，生成可执行文件：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("ld a.o b.o -macosx_version_min "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.14")]),t._v(" -o ab.out -lSystem\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成可执行文件 ab.out")]),t._v("\n")])])]),e("p",[t._v("使用 MachOView 工具查看可执行文件 ab.out 的代码段 __TEXT __text 的反汇编内容，如下：")]),t._v(" "),e("e-img",{attrs:{src:"/image/ab_macho_text.png"}}),t._v(" "),e("p",[t._v("图中红线部分分别是符号"),e("code",[t._v("_shared")]),t._v("和"),e("code",[t._v("_swap")]),t._v("对应的地址，链接前，a.o 中此两处的地址值均为0；在 ab.out 中，链接器根据 a.o 的 relocation table 的信息，对此两处地址进行了调整，将它们修改为有效地址。")]),t._v(" "),e("p",[t._v("花些时间分析修正后"),e("code",[t._v("_shared")]),t._v("和"),e("code",[t._v("_swap")]),t._v("所对应的文件偏移地址。")]),t._v(" "),e("p",[t._v("先看"),e("code",[t._v("_shared")]),t._v("，其所在指令的下一条指令相对于文件的偏移地址是 0x00000F83，相对偏移是 0x0000007D（小端），计算得到的"),e("code",[t._v("_shared")]),t._v("符号的地址值等于 0x00001000，该地址值对应的是 ab.out 中的 __DATA __data :")]),t._v(" "),e("e-img",{attrs:{src:"/image/ab_shared_addr.png"}}),t._v(" "),e("p",[t._v("该地址所存储的值 0x0000002A（小端）恰好等于 42。")]),t._v(" "),e("p",[t._v("对于"),e("code",[t._v("_swap")]),t._v("符号也是类似，其所在指令的下一条指令相对于文件的偏移地址是 0x00000F96，相对偏移是 0x0000000A，计算得到的目标地址值等于 0x00000FA0，恰好是"),e("code",[t._v("_swap")]),t._v("子程序的起始地址。")]),t._v(" "),e("p",[t._v("另外一个需要注意到的事实是：ab.out 中再也没有 relocation table 了，这不难理解，ab.out 中的符号都得到了重定位，relocation table 已经没有存在的必要了。")]),t._v(" "),e("p",[t._v("Relocation table 没有了，symbol table 呢？令人震惊的是，ab.out 的 symbol table 中条目更多了：")]),t._v(" "),e("e-img",{attrs:{src:"/image/ab_symbol_entries.png"}}),t._v(" "),e("p",[t._v("其中的"),e("code",[t._v("_main")]),t._v("、"),e("code",[t._v("_shared")]),t._v("、"),e("code",[t._v("_swap")]),t._v("我们是熟悉的，另外两个是啥？没有查到关于"),e("code",[t._v("__mh_execute_header")]),t._v("特别权威的资料，目测与虚拟地址有关，简单来说，Mach-O 某个字节的虚拟地址等于"),e("code",[t._v("__mh_execute_header")]),t._v("的地址值加上该字节在 Mach-O 文件中的 file offset；对于"),e("code",[t._v("dyld_stub_binder")]),t._v("，它和动态链接有关，后面博客讲动态链接时再说。")]),t._v(" "),e("p",[t._v("现在的问题是：ab.out 中"),e("code",[t._v("_main")]),t._v("、"),e("code",[t._v("_shared")]),t._v("、"),e("code",[t._v("_swap")]),t._v("这几个 symbol entry 存在的意义是啥？")]),t._v(" "),e("p",[t._v("我的理解是：如果从程序正常运行的角度来看，这几个符号没啥用。事实上，使用"),e("code",[t._v("strip")]),t._v("工具可以将这几个 symbol entry 从 symbol table 中抹掉。")]),t._v(" "),e("p",[t._v("最后，我的总体感受是：理解静态链接的关键在于理解符号，还是蛮容易的。")])],1)}),[],!1,null,null,null);a.default=n.exports}}]);